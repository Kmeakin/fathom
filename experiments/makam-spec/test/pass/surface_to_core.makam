%extend surface_to_core.

    %open fathom.lang.
    %open fathom.lang.core.semantics.

    tests : testsuite.
    %testsuite tests.


% FIXME: there seems to be a bug with indenting tests here - see https://github.com/astampoulis/makam/issues/94

    % Names

>> synth_type (surface.name "Type") Type Elem ?
>> Yes:
>> Type := kind_type.
>> Elem := core.type_type.

>> synth_type (surface.name "Array") Type Elem ?
>> Yes:
>> Type :=
    function_type type_type
        (closure [] (core.function_type core.int_type core.type_type)).
>> Elem :=
    core.function_intro core.type_type
        (core.function_intro core.int_type
            (core.array_type (core.local 1) (core.local 0))).

>> synth_type (surface.name "Format") Type Elem ?
>> Yes:
>> Type := kind_type.
>> Elem := core.format_type.

>> synth_type (surface.name "Repr") Type Elem ?
>> Yes:
>> Type := function_type format_type (closure [] core.type_type).
>> Elem :=
    core.function_intro core.format_type
        (core.format_repr (core.local 0)).

>> synth_type
    (context [ ( some "Boop", Level, _, format_type ) ])
    (surface.name "Boop")
    Type Elem ?
>> Yes:
>> Type := format_type.
>> Elem := core.local Level.

>> synth_type
    (context [ ( some "Boop", Level, _, format_type ) ])
    (surface.name "Bap")
    Type Elem ?
>> Impossible.


    % Annotated terms

>> synth_type
    (surface.ann
        (surface.record_intro [])
        (surface.ann
            (surface.record_type [])
            (surface.name "Type")))
    Type Elem ?
>> Yes:
>> Type := record_type (field_closure [] []).
>> Elem := core.record_intro [] [].

>> synth_type
    (surface.ann
        (surface.record_intro [ ( "data", surface.number_intro "23" ) ])
        (surface.ann
            (surface.record_type [ ( "data", surface.name "Int" ) ])
            (surface.name "Type")))
    Type Elem ?
>> Yes:
>> Type := record_type (field_closure [] [ ( "data", core.int_type ) ]).
>> Elem :=
    core.record_intro
        [ ( "data", core.int_intro 23 ) ]
        [ ( "data", core.int_type ) ].

>> synth_type
    (surface.ann
        (surface.record_intro
            [ ( "y", surface.number_intro "2" )
            , ( "x", surface.number_intro "1" )
            ])
        (surface.ann
            (surface.record_type
                [ ( "x", surface.name "Int" )
                , ( "y", surface.name "Int" )
                ])
            (surface.name "Type")))
    Type Elem ?
>> Yes:
>> Type :=
    record_type
        (field_closure []
            [ ( "x", core.int_type )
            , ( "y", core.int_type )
            ]).
>> Elem :=
    core.record_intro
        [ ( "x", core.int_intro 1 )
        , ( "y", core.int_intro 2 )
        ]
        [ ( "x", core.int_type )
        , ( "y", core.int_type )
        ].

>> synth_type
    (surface.ann
        (surface.record_intro
            [ ( "data", surface.sequence_intro [] )
            , ( "len", surface.number_intro "0" )
            ])
        (surface.ann
            (surface.record_type
                [ ( "len", surface.name "Int" )
                , ( "data"
                , surface.function_elim (surface.name "Array")
                        [ surface.enum_type [ "unit" ]
                        , surface.name "len"
                        ]
                )
                ])
            (surface.name "Type")))
    Type Elem ?
>> Yes:
>> Type := record_type
    (field_closure []
        [ ( "len", core.int_type )
        , ( "data"
          , core.function_elim
                (core.function_elim
                    (core.function_intro core.type_type
                            (core.function_intro core.int_type
                                (core.array_type (core.local 1) (core.local 0))))
                    (core.enum_type [ "unit" ]))
                (core.local 0)
          )
        ]).
>> Elem :=
    core.record_intro
        [ ( "len", core.int_intro 0 )
        , ( "data", core.array_intro [] (core.enum_type [ "unit" ]) )
        ]
        [ ( "len", core.int_type )
        , ( "data"
          , core.function_elim
                (core.function_elim
                    (core.function_intro core.type_type
                            (core.function_intro core.int_type
                                (core.array_type (core.local 1) (core.local 0))))
                    (core.enum_type [ "unit" ]))
                (core.local 0)
          )
        ].

>> synth_type
    (surface.ann
        (surface.record_intro
            [ ( "data"
              , surface.sequence_intro
                [ surface.enum_intro "unit"
                , surface.enum_intro "unit"
                ]
              )
            , ( "len", surface.number_intro "2" )
            ])
        (surface.ann
            (surface.record_type
                [ ( "len", surface.name "Int" )
                , ( "data"
                , surface.function_elim (surface.name "Array")
                        [ surface.enum_type [ "unit" ]
                        , surface.name "len"
                        ]
                )
                ])
            (surface.name "Type")))
    Type Elem ?
>> Yes:
>> Type := record_type
    (field_closure []
        [ ( "len", core.int_type )
        , ( "data"
          , core.function_elim
                (core.function_elim
                    (core.function_intro core.type_type
                            (core.function_intro core.int_type
                                (core.array_type (core.local 1) (core.local 0))))
                    (core.enum_type [ "unit" ]))
                (core.local 0)
          )
        ]).
>> Elem :=
    core.record_intro
        [ ( "len", core.int_intro 2 )
        , ( "data"
          , core.array_intro
                [ core.enum_intro "unit" [ "unit" ]
                , core.enum_intro "unit" [ "unit" ]
                ]
                (core.enum_type [ "unit" ])
          )
        ]
        [ ( "len", core.int_type )
        , ( "data"
          , core.function_elim
                (core.function_elim
                    (core.function_intro core.type_type
                            (core.function_intro core.int_type
                                (core.array_type (core.local 1) (core.local 0))))
                    (core.enum_type [ "unit" ]))
                (core.local 0)
          )
        ].

>> synth_type
    (surface.ann
        (surface.enum_intro "false")
        (surface.enum_type [ "true", "false" ]))
    Type Elem ?
>> Yes:
>> Type := enum_type [ "true", "false" ].
>> Elem := core.enum_intro "false" [ "true", "false" ].

>> synth_type (surface.ann (surface.number_intro "23") (surface.name "Int")) Type Elem ?
>> Yes:
>> Type := int_type.
>> Elem := core.int_intro 23.

>> synth_type
    (surface.ann
        (surface.number_intro "23")
        (surface.ann (surface.name "Int") (surface.name "Type")))
    Type Elem ?
>> Yes:
>> Type := int_type.
>> Elem := core.int_intro 23.

>> synth_type (surface.ann (surface.name "Int") (surface.name "Type")) Type Elem ?
>> Yes:
>> Type := type_type.
>> Elem := core.int_type.

>> synth_type (surface.ann (surface.record_type []) (surface.name "Format")) Type Elem ?
>> Yes:
>> Type := format_type.
>> Elem := core.format_intro_record [].

>> synth_type (surface.ann (surface.name "U8") (surface.name "Format")) Type Elem ?
>> Yes:
>> Type := format_type.
>> Elem := core.format_intro_u8.

>> check_type (surface.ann (surface.name "Int") (surface.name "Type")) format_type Elem ?
>> Impossible.

>> check_type (surface.ann (surface.name "U8") (surface.name "Format")) type_type Elem ?
>> Impossible.


    % Functions

    % TODO: Function type tests
    % TODO: Function term tests

>> synth_type
    (surface.function_elim (surface.name "Array")
        [ surface.name "Int"
        , surface.number_intro "23"
        ])
    Type Elem ?
>> Yes:
>> Type := type_type.
>> Elem :=
    core.function_elim
        (core.function_elim
            (core.function_intro core.type_type
                    (core.function_intro core.int_type
                        (core.array_type (core.local 1) (core.local 0))))
            core.int_type)
        (core.int_intro 23).

>> synth_type
    (surface.function_elim (surface.name "FormatArray")
        [ surface.name "U32Be"
        , surface.number_intro "23"
        ])
    Type Elem ?
>> Yes:
>> Type := format_type.
>> Elem :=
    core.function_elim
        (core.function_elim
            (core.function_intro core.format_type
                    (core.function_intro core.int_type
                        (core.format_intro_array (core.local 1) (core.local 0))))
            core.format_intro_u32be)
        (core.int_intro 23).

>> synth_type
    (surface.function_elim (surface.name "Repr")
        [ surface.name "U32Be"
        ])
    Type Elem ?
>> Yes:
>> Type := type_type.
>> Elem :=
    core.function_elim
        (core.function_intro core.format_type
            (core.format_repr (core.local 0)))
        core.format_intro_u32be.


    % Records

>> check_type (surface.record_type []) type_type Elem ?
>> Yes:
>> Elem := core.record_type [].

>> check_type
    (surface.record_type
        [ ( "data", surface.name "Int" )
        ])
    type_type Elem ?
>> Yes:
>> Elem :=
    core.record_type
        [ ( "data", core.int_type ) ].

>> check_type
    (surface.record_type
        [ ( "data", surface.name "Int" )
        , ( "data", surface.enum_type [] )
        ])
    type_type Elem ?
>> Impossible.

>> check_type
    (surface.record_type
        [ ( "x", surface.name "Int" )
        , ( "y", surface.name "Int" )
        ])
    type_type Elem ?
>> Yes:
>> Elem :=
    core.record_type
        [ ( "x", core.int_type )
        , ( "y", core.int_type )
        ].

>> check_type
    (surface.record_type
        [ ( "len", surface.name "Int" )
        , ( "data"
          , surface.function_elim (surface.name "Array")
                [ surface.enum_type [ "unit" ]
                , surface.name "len"
                ]
          )
        ])
    type_type Elem ?
>> Yes:
>> Elem :=
    core.record_type
        [ ( "len", core.int_type )
        , ( "data"
          , core.function_elim
                (core.function_elim
                    (core.function_intro core.type_type
                            (core.function_intro core.int_type
                                (core.array_type (core.local 1) (core.local 0))))
                    (core.enum_type [ "unit" ]))
                (core.local 0)
          )
        ].

>> check_type (surface.record_type []) format_type Elem ?
>> Yes:
>> Elem := core.format_intro_record [].

>> check_type
    (surface.record_type
        [ ( "data", surface.name "U32Be" )
        ])
    format_type Elem ?
>> Yes:
>> Elem :=
    core.format_intro_record
        [ ( "data", core.format_intro_u32be )
        ].

>> check_type
    (surface.record_type
        [ ( "data", surface.name "U32Be" )
        , ( "data", surface.name "U16Be" )
        ])
    format_type Elem ?
>> Impossible.

>> check_type
    (surface.record_type
        [ ( "x", surface.name "U32Le" )
        , ( "y", surface.name "U32Le" )
        ])
    format_type Elem ?
>> Yes:
>> Elem :=
    core.format_intro_record
        [ ( "x", core.format_intro_u32le )
        , ( "y", core.format_intro_u32le )
        ].

>> check_type
    (surface.record_type
        [ ( "len", surface.name "U16Be" )
        , ( "data"
          , surface.function_elim (surface.name "FormatArray")
                [ surface.name "U32Be"
                , surface.name "len"
                ]
          )
        ])
    format_type Elem ?
>> Yes:
>> Elem :=
    core.format_intro_record
        [ ( "len", core.format_intro_u16be )
        , ( "data"
          , core.function_elim
                (core.function_elim
                    (core.function_intro core.format_type
                            (core.function_intro core.int_type
                                (core.format_intro_array (core.local 1) (core.local 0))))
                    core.format_intro_u32be)
                (core.local 0)
          )
        ].

>> synth_type (surface.record_intro []) Type Elem ?
>> Yes:
>> Type := record_type (field_closure [] []).
>> Elem := core.record_intro [] [].

>> check_type
    (surface.record_intro [ ( "data", surface.number_intro "23" ) ])
    (record_type (field_closure [] [ ( "data", core.int_type ) ]))
    Elem ?
>> Yes:
>> Elem :=
    core.record_intro
        [ ( "data", core.int_intro 23 ) ]
        [ ( "data", core.int_type ) ].

>> check_type
    (surface.record_intro [ ( "data", surface.number_intro "23" ) ])
    (record_type (field_closure [] [ ( "data", core.enum_type [] ) ]))
    Elem ?
>> Impossible.

>> check_type
    (surface.record_intro [ ( "data", surface.number_intro "23" ) ])
    (record_type (field_closure [] [ ( "len", core.int_type ) ]))
    Elem ?
>> Impossible.

>> check_type
    (surface.record_intro
        [ ( "y", surface.number_intro "2" )
        , ( "x", surface.number_intro "1" )
        ])
    (record_type
        (field_closure []
            [ ( "x", core.int_type )
            , ( "y", core.int_type )
            ]))
    Elem ?
>> Yes:
>> Elem :=
    core.record_intro
        [ ( "x", core.int_intro 1 )
        , ( "y", core.int_intro 2 )
        ]
        [ ( "x", core.int_type )
        , ( "y", core.int_type )
        ].

>> check_type
    (surface.record_intro
        [ ( "data", surface.sequence_intro [] )
        , ( "len", surface.number_intro "0" )
        ])
    (record_type
        (field_closure []
            [ ( "len", core.int_type )
            , ( "data", core.array_type (core.enum_type [ "unit" ]) (core.local 0) )
            ]))
    Elem ?
>> Yes:
>> Elem :=
    core.record_intro
        [ ( "len", core.int_intro 0 )
        , ( "data", core.array_intro [] (core.enum_type [ "unit" ]) )
        ]
        [ ( "len", core.int_type )
        , ( "data", core.array_type (core.enum_type [ "unit" ]) (core.local 0) )
        ].

>> check_type
    (surface.record_intro
        [ ( "len", surface.number_intro "2" )
        , ( "data"
          , surface.sequence_intro
                [ surface.enum_intro "unit"
                , surface.enum_intro "unit"
                ]
          )
        ])
    (record_type
        (field_closure []
            [ ( "len", core.int_type )
            , ( "data", core.array_type (core.enum_type [ "unit" ]) (core.local 0) )
            ]))
    Elem ?
>> Yes:
>> Elem :=
    core.record_intro
        [ ( "len", core.int_intro 2 )
        , ( "data"
          , core.array_intro
                [ core.enum_intro "unit" [ "unit" ]
                , core.enum_intro "unit" [ "unit" ]
                ]
                (core.enum_type [ "unit" ])
          )
        ]
        [ ( "len", core.int_type )
        , ( "data", core.array_type (core.enum_type [ "unit" ]) (core.local 0) )
        ].

>> synth_type (surface.record_elim (surface.record_intro []) "hello") Type Elem ?
>> Impossible.

>> synth_type
    (surface.record_elim
        (surface.ann
            (surface.record_intro [ ( "data", surface.number_intro "23" ) ])
            (surface.ann
                (surface.record_type [ ( "data", surface.name "Int" ) ])
                (surface.name "Type")))
        "data")
    Type Elem ?
>> Yes:
>> Type := int_type.
>> Elem :=
    core.record_elim
        (core.record_intro
            [ ( "data", core.int_intro 23 ) ]
            [ ( "data", core.int_type ) ])
        "data".

>> synth_type
    (surface.record_elim
        (surface.ann
            (surface.record_intro
                [ ( "y", surface.number_intro "2" )
                , ( "x", surface.number_intro "1" )
                ])
            (surface.ann
                (surface.record_type
                    [ ( "x", surface.name "Int" )
                    , ( "y", surface.name "Int" )
                    ])
                (surface.name "Type")))
        "y")
    Type Elem ?
>> Yes:
>> Type := int_type.
>> Elem :=
    core.record_elim
        (core.record_intro
            [ ( "x", core.int_intro 1 ), ( "y", core.int_intro 2 ) ]
            [ ( "x", core.int_type ), ( "y", core.int_type ) ])
        "y".

>> synth_type
    (surface.record_elim
        (surface.ann
            (surface.record_intro
                [ ( "len", surface.number_intro "2" )
                , ( "data"
                  , surface.sequence_intro
                        [ surface.enum_intro "unit"
                        , surface.enum_intro "unit"
                        ]
                  )
                ])
            (surface.ann
                (surface.record_type
                    [ ( "len", surface.name "Int" )
                    , ( "data"
                    , surface.function_elim (surface.name "Array")
                            [ surface.enum_type [ "unit" ]
                            , surface.name "len"
                            ]
                    )
                    ])
                (surface.name "Type")))
        "data")
    Type Elem ?
>> Yes:
>> Type := array_type (enum_type [ "unit" ]) (int_intro 2).
>> Elem :=
    core.record_elim
        (core.record_intro
            [ ( "len", core.int_intro 2 )
            , ( "data"
              , core.array_intro
                    [ core.enum_intro "unit" [ "unit" ]
                    , core.enum_intro "unit" [ "unit" ]
                    ]
                    (core.enum_type [ "unit" ])
              )
            ]
            [ ( "len", core.int_type )
            , ( "data"
              , core.function_elim
                    (core.function_elim
                        (core.function_intro core.type_type
                                (core.function_intro core.int_type
                                    (core.array_type (core.local 1) (core.local 0))))
                        (core.enum_type [ "unit" ]))
                    (core.local 0)
              )
            ])
        "data".


    % Enumerations


    % Literals

>> check_type (surface.number_intro "23") int_type Elem ?
>> Yes:
>> Elem := core.int_intro 23.

>> check_type
    (surface.sequence_intro [])
    (array_type (enum_type [ "unit" ]) (int_intro 0))
    Elem ?
>> Yes:
>> Elem := core.array_intro [] (core.enum_type [ "unit" ]).

>> check_type
    (surface.sequence_intro
        [ surface.enum_intro "unit"
        , surface.enum_intro "unit"
        ])
    (array_type (enum_type [ "unit" ]) (int_intro 2))
    Elem ?
>> Yes:
>> Elem :=
    core.array_intro
        [ core.enum_intro "unit" [ "unit" ]
        , core.enum_intro "unit" [ "unit" ]
        ]
        (core.enum_type [ "unit" ]).

%end.
