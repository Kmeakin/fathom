// Identity function

let id : fun (A : _) -> A -> A
 = fun A => fun a => a;

let id_test : fun (A : _) -> A -> A
 = id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _
   id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id;


// Natural numbers

let Nat : Type
  = fun (Nat : _) ->
      fun (succ : Nat -> Nat) ->
      fun (zero : Nat) ->
        Nat;

let zero : Nat
  = fun Nat => fun succ => fun zero => zero;

let succ : Nat -> Nat
  = fun prev =>
      (fun Nat => fun succ => fun zero =>
        succ (prev _ succ zero));

let add : Nat -> Nat -> Nat
  = fun n0 => fun n1 => fun Nat => fun succ => fun zero =>
      n0 Nat succ (n1 Nat succ zero);

let mul : Nat -> Nat -> Nat
  = fun n0 => fun n1 =>
      fun Nat => fun succ => fun zero =>
        n0 Nat (n1 Nat succ) zero;

let n0 = zero;
let n1 = succ n0;
let n2 = succ n1;
let n3 = succ n2;
let n4 = succ n3;
let n5 = succ n4;
let n6 = succ n5;
let n7 = succ n6;
let n8 = succ n7;
let n9 = succ n8;
let n10 = succ n9;

let n3000 = mul n10 (mul n10 (mul n10 n3));


// Vectors

let Vec : Type -> Nat -> Type
  = fun Elem => fun len =>
      fun (Vec : Nat -> Type) ->
      fun (nil : Vec zero) ->
      fun (cons : fun (len : _) -> Elem -> Vec len -> Vec (succ len)) ->
        Vec len;

let vnil : fun (Elem : _) -> Vec Elem zero
  = fun Elem =>
      fun Vec => fun nil => fun cons => nil;

let vcons : fun (Elem : _) -> fun (len : _) -> Elem -> Vec Elem len -> Vec Elem (succ len)
  = fun Elem => fun len => fun head => fun tail =>
      fun Vec => fun nil => fun cons =>
        cons len head (tail Vec nil cons);

let vec1 =
  (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
    (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero
      (vnil _)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));


Type
