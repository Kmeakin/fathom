use crate::{StringId, StringInterner};
use crate::surface::{Arena, Term};
use crate::surface::lexer::Token;

grammar<'arena, 'source>(interner: &mut StringInterner, arena: &'arena Arena<'arena>);

extern {
    type Location = usize;
    type Error = ();

    enum Token<'source> {
        "ident" => Token::Ident(<&'source str>),

        "fun" => Token::KeywordFun,
        "let" => Token::KeywordLet,
        "Type" => Token::KeywordType,

        "(" => Token::OpenParen,
        ")" => Token::CloseParen,

        ":" => Token::Colon,
        "=" => Token::Equals,
        "=>" => Token::EqualsGreater,
        "->" => Token::HyphenGreater,
        ";" => Token::Semicolon,
    }
}

pub Term: Term<'arena> = {
    FunTerm,
    // FIXME: LALRPOP does not accept raw identifiers (see: https://github.com/lalrpop/lalrpop/issues/613)
    <expr: FunTerm> ":" <type_: Term> => {
        Term::Ann(
            arena.alloc_term(expr),
            arena.alloc_term(type_),
        )
    },
    "let" <def_name: Name> <def_type: (":" < FunTerm>)?> "=" <def_expr: FunTerm> ";" <body_expr: Term> => {
        Term::Let(
            def_name,
            def_type.map(|def_type| arena.alloc_term(def_type) as &_),
            arena.alloc_term(def_expr),
            arena.alloc_term(body_expr),
        )
    },
};

FunTerm: Term<'arena> = {
    AppTerm,
    "fun" "("<input_name: Name> ":" <input_type: Term> ")" "->"  <output_type: FunTerm> => {
        Term::FunType(
            input_name,
            arena.alloc_term(input_type),
            arena.alloc_term(output_type),
        )
    },
    "fun" <input_name: Name> "=>" <output_type: FunTerm> => {
        Term::FunIntro(
            input_name,
            arena.alloc_term(output_type),
        )
    },
};

AppTerm: Term<'arena> = {
    AtomicTerm,
    <head_expr: AppTerm> <input_expr: AtomicTerm> => {
        Term::FunElim(
            arena.alloc_term(head_expr),
            arena.alloc_term(input_expr),
        )
    },
};

AtomicTerm: Term<'arena> = {
    <name: Name> => Term::Var(name),
    "Type" => Term::Universe,
    "(" <term: Term> ")" => term,
};

#[inline]
Name: StringId = {
    <"ident"> => interner.get_or_intern(<>),
};
