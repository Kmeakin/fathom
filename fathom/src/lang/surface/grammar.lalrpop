use std::sync::Arc;

use crate::lang::{Range, Ranged};
use crate::lang::surface::{
    Constant, FieldDeclaration, FieldDefinition, ItemData, Module, Pattern, PatternData, StructType,
    Term, TermData,
};
use crate::lang::surface::lexer::Token;
use crate::reporting::LexerMessage;

grammar<'source>(file_id: usize);

extern {
    type Location = usize;
    type Error = LexerMessage;

    enum Token<'source> {
        "doc comment" => Token::DocComment(<String>),
        "inner doc comment" => Token::InnerDocComment(<String>),

        "name" => Token::Name(<&'source str>),
        "numeric literal" => Token::NumericLiteral(<&'source str>),
        "string literal" => Token::StringLiteral(<&'source str>),
        "character literal" => Token::CharLiteral(<&'source str>),

        "bool_elim" => Token::BoolElim,
        "const" => Token::Const,
        "else" => Token::Else,
        "f32" => Token::F32,
        "f64" => Token::F64,
        "Format" => Token::Format,
        "global" => Token::Global,
        "if" => Token::If,
        "int" => Token::Int,
        "int_elim" => Token::IntElim,
        "item" => Token::Item,
        "Kind" => Token::Kind,
        "match" => Token::Match,
        "repr" => Token::Repr,
        "struct" => Token::Struct,
        "Type" => Token::Type,

        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,

        "!" => Token::Bang,
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equals,
        "=>" => Token::EqualsGreater,
        "." => Token::FullStop,
        "->" => Token::HyphenGreater,
        ";" => Token::Semi,
    }
}

pub Module: Module = {
    <doc: "inner doc comment"*> <items: Ranged<ItemData>*> => {
        let doc = Arc::from(doc);

        Module {
            file_id,
            doc: Arc::from(doc),
            items,
        }
    },
};

ItemData: ItemData = {
    <doc: "doc comment"*>
    "const" <name: Ranged<Name>> <type_: (":" <Term>)?> "=" <term: Term> ";" => {
        let doc = Arc::from(doc);

        ItemData::Constant(Constant {
            doc: Arc::from(doc),
            name,
            type_,
            term,
        })
    },
    <doc: "doc comment"*>
    "struct" <name: Ranged<Name>> <type_: (":" <Term>)?> "{"
        <mut fields: (<FieldDeclaration> ",")*>
        <last: FieldDeclaration?>
    "}" => {
        fields.extend(last);

        ItemData::StructType(StructType {
            doc: Arc::from(doc),
            name,
            type_,
            fields,
        })
    },
};

#[inline] Pattern: Pattern = Ranged<PatternData>;

PatternData: PatternData = {
    <name: Name> => PatternData::Name(name),
    <literal: "numeric literal"> => PatternData::NumberLiteral(literal.to_owned()),
};

#[inline] Term: Term = Ranged<TermData>;
#[inline] ArrowTerm: Term = Ranged<ArrowTermData>;
#[inline] AppTerm: Term = Ranged<AppTermData>;
#[inline] AtomicTerm: Term = Ranged<AtomicTermData>;

TermData: TermData = {
    ArrowTermData,
    <term: ArrowTerm> ":" <ty: Term> => TermData::Ann(Box::new(term), Box::new(ty)),
};

ArrowTermData: TermData = {
    AppTermData,
    <param_type: AppTerm> "->" <body_type: ArrowTerm> => {
        TermData::FunctionType(Box::new(param_type), Box::new(body_type))
    },
};

AppTermData: TermData = {
    AtomicTermData,
    <head: AtomicTerm> <arguments: AtomicTerm+> => {
        TermData::FunctionElim(Box::new(head), arguments)
    },
};

AtomicTermData: TermData = {
    "(" <term: TermData> ")" => term,
    <name: Name> => TermData::Name(name),
    "Type" => TermData::TypeType,
    "Kind" => TermData::KindType,
    "repr" => TermData::Repr,
    "struct" "{" <mut fields: (<FieldDefinition> ",")*> <last: FieldDefinition?> "}" => {
        fields.extend(last);
        TermData::StructTerm(fields)
    },
    <term: AtomicTerm> "." <name: Ranged<Name>> => TermData::StructElim(Box::new(term), name),
    <literal: "numeric literal"> => TermData::NumberLiteral(literal.to_owned()),
    "if" <head: Term> "{" <if_true: Term> "}" "else" "{" <if_false: Term> "}" => {
        TermData::If(Box::new(head), Box::new(if_true), Box::new(if_false))
    },
    "match" <head: Term> "{" <mut branches: (<Pattern> "=>" <Term> ",")*> <last: (<Pattern> "=>" <Term>)?>"}" => {
        branches.extend(last);
        TermData::Match(Box::new(head), branches)
    },
    "Format" => TermData::FormatType,
};

#[inline]
FieldDeclaration: FieldDeclaration = {
    <docs: "doc comment"*> <label: Ranged<Name>> ":" <term: Term> => {
        FieldDeclaration { doc: Arc::from(docs), label, term }
    },
};

#[inline]
FieldDefinition: FieldDefinition = {
    <label: Ranged<Name>> "=" <term: Term> => FieldDefinition { label, term },
};

#[inline]
Name: String = {
    <"name"> => (<>).to_owned(),
}

#[inline]
Ranged<T>: Ranged<T> = {
    <start: @L> <data: T> <end: @R> => Ranged::new(Range::from(start..end), data),
};
