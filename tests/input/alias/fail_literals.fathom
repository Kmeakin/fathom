fail_int_b2_unexpected_eol : Int = 0b; //~ error: unexpected end of literal
fail_int_b8_unexpected_eol : Int = 0o; //~ error: unexpected end of literal
fail_int_b16_unexpected_eol : Int = 0x; //~ error: unexpected end of literal

fail_int_b2_expect_digit_1 : Int = 0b_; //~ error: expected a base 2 digit
fail_int_b8_expect_digit_1 : Int = 0o_; //~ error: expected a base 8 digit
fail_int_b16_expect_digit_1 : Int = 0x_; //~ error: expected a base 16 digit

fail_int_b2_expect_digit_2 : Int = 0b2; //~ error: expected a base 2 digit
fail_int_b8_expect_digit_2 : Int = 0o8; //~ error: expected a base 8 digit
fail_int_b16_expect_digit_2 : Int = 0xG; //~ error: expected a base 16 digit

fail_int_b2_expect_digit_3 : Int = 0b02; //~ error: expected a base 2 digit or digit separator
fail_int_b8_expect_digit_3 : Int = 0o08; //~ error: expected a base 8 digit or digit separator
fail_int_b10_expect_digit_3 : Int = 0A; //~ error: expected a base 10 digit or digit separator
fail_int_b16_expect_digit_3 : Int = 0x0G; //~ error: expected a base 16 digit or digit separator


fail_f32_b2_not_supported : F32 = 0b; //~ error: base 2 float literals are not yet supported
fail_f32_b8_not_supported : F32 = 0o; //~ error: base 8 float literals are not yet supported
fail_f32_b16_not_supported : F32 = 0x; //~ error: base 16 float literals are not yet supported

fail_f32_expect_digit_1 : F32 = 0.; //~ error: expected a base 10 digit
fail_f32_expect_digit_2 : F32 = 0A; //~ error: expected a base 10 digit, digit separator, period, or exponent
fail_f32_expect_digit_3 : F32 = 0.A; //~ error: expected a base 10 digit
fail_f32_expect_digit_4 : F32 = 0._; //~ error: expected a base 10 digit
fail_f32_expect_digit_5 : F32 = 0..; //~ error: expected a base 10 digit
fail_f32_expect_digit_6 : F32 = 0.0.; //~ error: expected a base 10 digit, digit separator, or exponent
fail_f32_exponent_not_supported_1 : F32 = 0e; //~ error: exponents are not yet supported for float literals
fail_f32_exponent_not_supported_2 : F32 = 0E; //~ error: exponents are not yet supported for float literals
fail_f32_exponent_not_supported_3 : F32 = 0.0e; //~ error: exponents are not yet supported for float literals
fail_f32_exponent_not_supported_4 : F32 = 0.0E; //~ error: exponents are not yet supported for float literals


fail_f64_b2_not_supported : F64 = 0b; //~ error: base 2 float literals are not yet supported
fail_f64_b8_not_supported : F64 = 0o; //~ error: base 8 float literals are not yet supported
fail_f64_b16_not_supported : F64 = 0x; //~ error: base 16 float literals are not yet supported

fail_f64_expect_digit_1 : F64 = 0.; //~ error: expected a base 10 digit
fail_f64_expect_digit_2 : F64 = 0A; //~ error: expected a base 10 digit, digit separator, period, or exponent
fail_f64_expect_digit_3 : F64 = 0.A; //~ error: expected a base 10 digit
fail_f64_expect_digit_4 : F64 = 0._; //~ error: expected a base 10 digit
fail_f64_expect_digit_5 : F64 = 0..; //~ error: expected a base 10 digit
fail_f64_expect_digit_6 : F64 = 0.0.; //~ error: expected a base 10 digit, digit separator, or exponent
fail_f64_exponent_not_supported_1 : F64 = 0e; //~ error: exponents are not yet supported for float literals
fail_f64_exponent_not_supported_2 : F64 = 0E; //~ error: exponents are not yet supported for float literals
fail_f64_exponent_not_supported_3 : F64 = 0.0e; //~ error: exponents are not yet supported for float literals
fail_f64_exponent_not_supported_4 : F64 = 0.0E; //~ error: exponents are not yet supported for float literals
