stdout = '''
let id : fun (A : Type) -> A -> A = fun A a => a;
let id_test : fun (A : Type) -> A -> A =
id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id _ id;
let Nat : Type = fun (Nat : _) -> (Nat -> Nat) -> Nat -> Nat;
let zero : fun (Nat : Type) -> (Nat -> Nat) -> Nat -> Nat =
fun Nat succ zero => zero;
let succ : (fun (Nat : Type) -> (Nat -> Nat) -> Nat -> Nat) -> fun (Nat :
Type) -> (Nat -> Nat) -> Nat -> Nat =
fun prev Nat succ zero => succ (prev (_ prev Nat succ zero) succ zero);
let add : (fun (Nat : Type) -> (Nat -> Nat) -> Nat -> Nat) -> (fun (Nat :
Type) -> (Nat -> Nat) -> Nat -> Nat) -> fun (Nat : Type) -> (Nat -> Nat) -> Nat
-> Nat = fun n0 n1 Nat succ zero => n0 Nat succ (n1 Nat succ zero);
let mul : (fun (Nat : Type) -> (Nat -> Nat) -> Nat -> Nat) -> (fun (Nat :
Type) -> (Nat -> Nat) -> Nat -> Nat) -> fun (Nat : Type) -> (Nat -> Nat) -> Nat
-> Nat = fun n0 n1 Nat succ zero => n0 Nat (n1 Nat succ) zero;
let n0 : _ = zero;
let n1 : _ = succ n0;
let n2 : _ = succ n1;
let n3 : _ = succ n2;
let n4 : _ = succ n3;
let n5 : _ = succ n4;
let n6 : _ = succ n5;
let n7 : _ = succ n6;
let n8 : _ = succ n7;
let n9 : _ = succ n8;
let n10 : _ = succ n9;
let n3000 : _ = mul n10 (mul n10 (mul n10 n3));
let Vec : Type -> (fun (Nat : Type) -> (Nat -> Nat) -> Nat -> Nat) -> Type =
fun Elem len => fun (Vec : (fun (Nat : Type) -> (Nat -> Nat) -> Nat -> Nat) ->
Type) -> Vec (fun Nat succ zero => zero) -> (fun (len : fun (Nat : Type) -> (Nat
-> Nat) -> Nat -> Nat) -> Elem -> Vec len ->
Vec (fun Nat succ zero => succ (len Nat succ zero))) -> Vec len;
let vnil : fun (Elem : Type) (Vec : (fun (Nat : Type) -> (Nat -> Nat) -> Nat ->
Nat) -> Type) -> Vec (fun Nat succ zero => zero) -> (fun (len : fun (Nat :
Type) -> (Nat -> Nat) -> Nat -> Nat) -> Elem -> Vec len ->
Vec (fun Nat succ zero => succ (len Nat succ zero))) ->
Vec (fun Nat succ zero => zero) = fun Elem Vec nil cons => nil;
let vcons : fun (Elem : Type) (len : fun (Nat : Type) -> (Nat -> Nat) -> Nat ->
Nat) -> Elem -> (fun (Vec : (fun (Nat : Type) -> (Nat -> Nat) -> Nat -> Nat) ->
Type) -> Vec (fun Nat succ zero => zero) -> (fun (len : fun (Nat : Type) -> (Nat
-> Nat) -> Nat -> Nat) -> Elem -> Vec len ->
Vec (fun Nat succ zero => succ (len Nat succ zero))) -> Vec len) -> fun (Vec :
(fun (Nat : Type) -> (Nat -> Nat) -> Nat -> Nat) -> Type) ->
Vec (fun Nat succ zero => zero) -> (fun (len : fun (Nat : Type) -> (Nat -> Nat)
-> Nat -> Nat) -> Elem -> Vec len ->
Vec (fun Nat succ zero => succ (len Nat succ zero))) ->
Vec (fun Nat succ zero => succ (len Nat succ zero)) =
fun Elem len head tail Vec nil cons => cons len head (tail Vec nil cons);
let vec1 : _ =
vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vcons _ _ zero (vnil _))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
Type : Type
'''
stderr = ''
