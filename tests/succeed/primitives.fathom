let test_Void : Type = Void;

let test_U8 : Type = U8;
let test_U16 : Type = U16;
let test_U32 : Type = U32;
let test_U64 : Type = U64;
let test_S8 : Type = S8;
let test_S16 : Type = S16;
let test_S32 : Type = S32;
let test_S64 : Type = S64;
let test_F32 : Type = F32;
let test_F64 : Type = F64;
let test_Array8 : U8 -> Type -> Type = Array8;
let test_Array16 : U16 -> Type -> Type = Array16;
let test_Array32 : U32 -> Type -> Type = Array32;
let test_Array64 : U64 -> Type -> Type = Array64;
let test_Pos : Type = Pos;
let test_Ref : Type -> Type = Ref;

let test_U8_literal : U8 = 1;
let test_U16_literal : U16 = 1;
let test_U32_literal : U32 = 1;
let test_U64_literal : U64 = 1;
let test_S8_literal : S8 = 1;
let test_S16_literal : S16 = 1;
let test_S32_literal : S32 = 1;
let test_S64_literal : S64 = 1;
let test_F32_literal : F32 = 1;
let test_F64_literal : F64 = 1;

let test_format : Type = Format;
let test_succeed : fun (Elem : Type) -> Elem -> Format = succeed;
let test_fail : Format = fail;
let test_u8 : Format = u8;
let test_u16be : Format = u16be;
let test_u16le : Format = u16le;
let test_u32be : Format = u32be;
let test_u32le : Format = u32le;
let test_u64be : Format = u64be;
let test_u64le : Format = u64le;
let test_s8 : Format = s8;
let test_s16be : Format = s16be;
let test_s16le : Format = s16le;
let test_s32be : Format = s32be;
let test_s32le : Format = s32le;
let test_s64be : Format = s64be;
let test_s64le : Format = s64le;
let test_f32be : Format = f32be;
let test_f32le : Format = f32le;
let test_f64be : Format = f64be;
let test_f64le : Format = f64le;
let test_array8 : U8 -> Format -> Format = array8;
let test_array16 : U16 -> Format -> Format = array16;
let test_array32 : U32 -> Format -> Format = array32;
let test_array64 : U64 -> Format -> Format = array64;
let test_link8 : Pos -> U8 -> Format -> Format = link8;
let test_link16 : Pos -> U16 -> Format -> Format = link16;
let test_link32 : Pos -> U32 -> Format -> Format = link32;
let test_link64 : Pos -> U64 -> Format -> Format = link64;
let test_stream_pos : Format = stream_pos;
let test_repr : Format -> Type = Repr;

let test_u8_add : U8 -> U8 -> U8 = u8_add;
let test_u8_sub : U8 -> U8 -> U8 = u8_sub;
let test_u8_mul : U8 -> U8 -> U8 = u8_mul;
let test_u8_div : U8 -> U8 -> U8 = u8_div;
let test_u8_not : U8 -> U8 = u8_not;
let test_u8_shl : U8 -> U8 -> U8 = u8_shl;
let test_u8_shr : U8 -> U8 -> U8 = u8_shr;
let test_u8_and : U8 -> U8 -> U8 = u8_and;
let test_u8_or : U8 -> U8 -> U8 = u8_or;
let test_u8_xor : U8 -> U8 -> U8 = u8_xor;

let test_u16_add : U16 -> U16 -> U16 = u16_add;
let test_u16_sub : U16 -> U16 -> U16 = u16_sub;
let test_u16_mul : U16 -> U16 -> U16 = u16_mul;
let test_u16_div : U16 -> U16 -> U16 = u16_div;
let test_u16_not : U16 -> U16 = u16_not;
let test_u16_shl : U16 -> U8 -> U16 = u16_shl;
let test_u16_shr : U16 -> U8 -> U16 = u16_shr;
let test_u16_and : U16 -> U16 -> U16 = u16_and;
let test_u16_or : U16 -> U16 -> U16 = u16_or;
let test_u16_xor : U16 -> U16 -> U16 = u16_xor;

let test_u32_add : U32 -> U32 -> U32 = u32_add;
let test_u32_sub : U32 -> U32 -> U32 = u32_sub;
let test_u32_mul : U32 -> U32 -> U32 = u32_mul;
let test_u32_div : U32 -> U32 -> U32 = u32_div;
let test_u32_not : U32 -> U32 = u32_not;
let test_u32_shl : U32 -> U8 -> U32 = u32_shl;
let test_u32_shr : U32 -> U8 -> U32 = u32_shr;
let test_u32_and : U32 -> U32 -> U32 = u32_and;
let test_u32_or : U32 -> U32 -> U32 = u32_or;
let test_u32_xor : U32 -> U32 -> U32 = u32_xor;

let test_u64_add : U64 -> U64 -> U64 = u64_add;
let test_u64_sub : U64 -> U64 -> U64 = u64_sub;
let test_u64_mul : U64 -> U64 -> U64 = u64_mul;
let test_u64_div : U64 -> U64 -> U64 = u64_div;
let test_u64_not : U64 -> U64 = u64_not;
let test_u64_shl : U64 -> U8 -> U64 = u64_shl;
let test_u64_shr : U64 -> U8 -> U64 = u64_shr;
let test_u64_and : U64 -> U64 -> U64 = u64_and;
let test_u64_or : U64 -> U64 -> U64 = u64_or;
let test_u64_xor : U64 -> U64 -> U64 = u64_xor;

let test_s8_neg : S8 -> S8 = s8_neg;
let test_s8_add : S8 -> S8 -> S8 = s8_add;
let test_s8_sub : S8 -> S8 -> S8 = s8_sub;
let test_s8_mul : S8 -> S8 -> S8 = s8_mul;
let test_s8_div : S8 -> S8 -> S8 = s8_div;

let test_s16_neg : S16 -> S16 = s16_neg;
let test_s16_add : S16 -> S16 -> S16 = s16_add;
let test_s16_sub : S16 -> S16 -> S16 = s16_sub;
let test_s16_mul : S16 -> S16 -> S16 = s16_mul;
let test_s16_div : S16 -> S16 -> S16 = s16_div;

let test_s32_neg : S32 -> S32 = s32_neg;
let test_s32_add : S32 -> S32 -> S32 = s32_add;
let test_s32_sub : S32 -> S32 -> S32 = s32_sub;
let test_s32_mul : S32 -> S32 -> S32 = s32_mul;
let test_s32_div : S32 -> S32 -> S32 = s32_div;

let test_s64_neg : S64 -> S64 = s64_neg;
let test_s64_add : S64 -> S64 -> S64 = s64_add;
let test_s64_sub : S64 -> S64 -> S64 = s64_sub;
let test_s64_mul : S64 -> S64 -> S64 = s64_mul;
let test_s64_div : S64 -> S64 -> S64 = s64_div;

Type
