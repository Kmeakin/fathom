stdout = '''
let device_table : _ = let u16_div_ceil : _ =
fun numerator => fun denominator => let quotient : _ numerator denominator =
numerator / denominator;
match (u16_lt (quotient * denominator) numerator) {
    false => quotient,
    true => quotient + (1 : U16),
};
let delta_bits : _ = fun delta_format => fun num_sizes => match delta_format {
    0x1 => num_sizes * (2 : U16),
    0x2 => num_sizes * (4 : U16),
    0x3 => num_sizes * (8 : U16),
    _ => 0,
};
let num_sizes : _ = fun start => fun end => (end - start) + (1 : U16);
{
    start_size <- u16be,
    end_size <- u16be,
    delta_format <- u16be,
    delta_values <- let delta_bits : _ start_size end_size delta_format =
    delta_bits delta_format (num_sizes start_size end_size);
    array16 (u16_div_ceil delta_bits 16) u16be,
};
{} : {}
'''
stderr = ''
