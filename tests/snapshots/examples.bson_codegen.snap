// auto-generated: "ddl 0.1.0"

extern crate ddl_util;

use self::ddl_util::FromBinary;
use std::io;
use std::io::prelude::*;

/// Binary data
#[derive(Debug, Clone)]
pub struct BinData {
    /// The number of bytes stored
    pub len: i32,
    /// Binary data subtype
    ///
    /// - `0x00`: Generic binary subtype
    /// - `0x01`: Function
    /// - `0x02`: Binary (Old)
    /// - `0x03`: UUID (Old)
    /// - `0x04`: UUID
    /// - `0x05`: MD5
    /// - `0x80`: User defined
    pub subtype: u8,
    /// The binary data
    pub data: Vec<u8>,
}

impl FromBinary for BinData {
    fn from_binary<R: Read>(reader: &mut R) -> io::Result<BinData> {
        let len = ddl_util::from_i32be(reader)?;
        let subtype = ddl_util::from_u8(reader)?;
        let data = ddl_util::from_array(0..len as u64, || ddl_util::from_u8(reader))?;
        Ok::<_, io::Error>(BinData {
            len: len,
            subtype: subtype,
            data: data,
        })
    }
}

#[derive(Debug, Clone)]
pub struct ObjectId {
    pub epoch_time: i32,
    pub machine_id: u32,
    pub process_id: u16,
    pub counter: u32,
}

impl FromBinary for ObjectId {
    fn from_binary<R: Read>(reader: &mut R) -> io::Result<ObjectId> {
        let epoch_time = ddl_util::from_i32be(reader)?;
        let machine_id = ddl_util::from_u24be(reader)?;
        let process_id = ddl_util::from_u16be(reader)?;
        let counter = ddl_util::from_u24be(reader)?;
        Ok::<_, io::Error>(ObjectId {
            epoch_time: epoch_time,
            machine_id: machine_id,
            process_id: process_id,
            counter: counter,
        })
    }
}

#[derive(Debug, Clone)]
pub enum ElementContent {
    /// 64-bit floating point
    Double(f64),
    /// Binary data
    BinData(BinData),
    /// Undefined (value) - deprecated
    Undefined(()),
    /// ObjectId
    ObjectId(ObjectId),
    /// Boolean
    ///
    /// - `0x00`: false
    /// - `0x01`: true
    Boolean(u8),
    /// UTC datetime
    UtcDatetime(i64),
    /// Null value
    Null(()),
    /// 32-bit integer
    Int(i32),
    /// Timestamp
    Timestamp(u64),
    /// 64-bit integer
    Long(i64),
}

#[derive(Debug, Clone)]
pub struct Element {
    pub elem_type: u8,
    pub content: ElementContent,
}

impl FromBinary for Element {
    fn from_binary<R: Read>(reader: &mut R) -> io::Result<Element> {
        let elem_type = ddl_util::from_u8(reader)?;
        let content = if (elem_type) == (1u8) {
            let x = ddl_util::from_f64le(reader)?;
            Ok::<_, io::Error>(ElementContent::Double(x))
        }
        else
        if (elem_type) == (5u8) {
            let x = BinData::from_binary(reader)?;
            Ok::<_, io::Error>(ElementContent::BinData(x))
        }
        else
        if (elem_type) == (6u8) {
            let x = ddl_util::empty()?;
            Ok::<_, io::Error>(ElementContent::Undefined(x))
        }
        else
        if (elem_type) == (7u8) {
            let x = ObjectId::from_binary(reader)?;
            Ok::<_, io::Error>(ElementContent::ObjectId(x))
        }
        else
        if (elem_type) == (8u8) {
            let x = ddl_util::from_u8(reader)?;
            Ok::<_, io::Error>(ElementContent::Boolean(x))
        }
        else
        if (elem_type) == (9u8) {
            let x = ddl_util::from_i64le(reader)?;
            Ok::<_, io::Error>(ElementContent::UtcDatetime(x))
        }
        else
        if (elem_type) == (10u8) {
            let x = ddl_util::empty()?;
            Ok::<_, io::Error>(ElementContent::Null(x))
        }
        else
        if (elem_type) == (16u8) {
            let x = ddl_util::from_i32le(reader)?;
            Ok::<_, io::Error>(ElementContent::Int(x))
        }
        else
        if (elem_type) == (17u8) {
            let x = ddl_util::from_u64le(reader)?;
            Ok::<_, io::Error>(ElementContent::Timestamp(x))
        }
        else
        if (elem_type) == (18u8) {
            let x = ddl_util::from_i64le(reader)?;
            Ok::<_, io::Error>(ElementContent::Long(x))
        } else {
            ddl_util::error()
        }?;
        Ok::<_, io::Error>(Element {
            elem_type: elem_type,
            content: content,
        })
    }
}

/// BSON Document
///
/// <http://bsonspec.org/spec.html>
#[derive(Debug, Clone)]
pub struct Document {
    /// Total number of bytes comprising the document.
    pub len: i32,
    /// The elements that make up this document
    pub fields: Vec<Element>,
}

impl FromBinary for Document {
    fn from_binary<R: Read>(reader: &mut R) -> io::Result<Document> {
        let len = ddl_util::from_i32be(reader)?;
        let fields = ddl_util::from_array(0..1u8, || Element::from_binary(reader))?;
        Ok::<_, io::Error>(Document {
            len: len,
            fields: fields,
        })
    }
}

