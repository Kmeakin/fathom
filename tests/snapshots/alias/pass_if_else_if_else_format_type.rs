// This file is automatically @generated by ddl 0.1.0
// It is not intended for manual editing.

#[derive(Copy, Clone)]
pub enum Enum0 {
    True(f64),
    False(f32),
}

#[derive(Copy, Clone)]
pub enum Enum1 {
    True(f64),
    False(f32),
}

#[derive(Copy, Clone)]
pub enum Enum2 {
    True(Enum0),
    False(Enum1),
}

#[derive(Copy, Clone)]
pub struct Test {
    inner: Enum2,
}

impl Test {
    pub fn inner(&self) -> Enum2 {
        self.inner
    }
}

impl ddl_rt::Format for Test {
    type Host = Test;
}

impl<'data> ddl_rt::ReadFormat<'data> for Test {
    fn read(reader: &mut ddl_rt::FormatReader<'data>) -> Result<Test, ddl_rt::ReadError> {
        let inner = if true { 
            Enum2::True(if true { 
                Enum0::True(reader.read::<ddl_rt::F64Be>()?)
            } else { 
                Enum0::False(reader.read::<ddl_rt::F32Be>()?)
            })
        } else { 
            Enum2::False(if true { 
                Enum1::True(reader.read::<ddl_rt::F64Be>()?)
            } else { 
                Enum1::False(reader.read::<ddl_rt::F32Be>()?)
            })
        };

        Ok(Test {
            inner,
        })
    }
}
