extern crate ddl_util;

use std::io;
use std::io::prelude::*;

#[derive(Debug, Clone)]
pub struct Bitmap {
    pub extents: BitmapExtents,
    pub data: Vec<Pixel>,
}

impl Bitmap {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<Bitmap> {
        let extents = {
            let width = ddl_util::from_u32be(reader)?;
            let height = ddl_util::from_u32be(reader)?;
            Ok::<_, io::Error>(BitmapExtents {
                width: width,
                height: height,
            })
        }?;
        let data =
        (0..(extents.width
        *
        extents.height)).map(|_| Pixel::read(reader)).collect::<Result<_, _>>()?;
        Ok::<_, io::Error>(Bitmap {
            extents: extents,
            data: data,
        })
    }
}

#[derive(Debug, Clone)]
pub struct BitmapExtents {
    pub width: u32,
    pub height: u32,
}

pub type Bmp = Bitmap;

#[derive(Debug, Clone)]
pub struct Pixel {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}

impl Pixel {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<Pixel> {
        let r = ddl_util::from_u8(reader)?;
        let g = ddl_util::from_u8(reader)?;
        let b = ddl_util::from_u8(reader)?;
        let a = ddl_util::from_u8(reader)?;
        Ok::<_, io::Error>(Pixel {
            r: r,
            g: g,
            b: b,
            a: a,
        })
    }
}

