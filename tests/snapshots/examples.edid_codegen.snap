extern crate ddl_util;

use std::io;
use std::io::prelude::*;

pub struct DisplayParams {
    pub input_flags: u8,
    pub screen_size_h: u8,
    pub screen_size_v: u8,
    pub gamma_mod: u8,
    pub features_flags: u8,
}

impl DisplayParams {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<DisplayParams> {
        let input_flags = ddl_util::from_u8(reader)?;
        let screen_size_h = ddl_util::from_u8(reader)?;
        let screen_size_v = ddl_util::from_u8(reader)?;
        let gamma_mod = ddl_util::from_u8(reader)?;
        let features_flags = ddl_util::from_u8(reader)?;
        Ok(DisplayParams {
            input_flags: input_flags,
            screen_size_h: screen_size_h,
            screen_size_v: screen_size_v,
            gamma_mod: gamma_mod,
            features_flags: features_flags,
        })
    }
}

pub struct Edid {
    pub header: Header,
    pub display_params: DisplayParams,
}

impl Edid {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<Edid> {
        let header = Header::read(reader)?;
        let display_params = DisplayParams::read(reader)?;
        Ok(Edid {
            header: header,
            display_params: display_params,
        })
    }
}

pub struct Header {
    pub magic: Vec<u8>,
    pub mfg_bytes: u16,
    pub product_code: u16,
    pub serial: u32,
    pub mfg_week: u8,
    pub mfg_year_mod: u8,
    pub edid_version_major: u8,
    pub edid_version_minor: u8,
}

impl Header {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<Header> {
        let magic = (0..8).map(|_| ddl_util::from_u8(reader)).collect::<Result<_, _>>()?;
        let mfg_bytes = ddl_util::from_u16le(reader)?;
        let product_code = ddl_util::from_u16le(reader)?;
        let serial = ddl_util::from_u32le(reader)?;
        let mfg_week = ddl_util::from_u8(reader)?;
        let mfg_year_mod = ddl_util::from_u8(reader)?;
        let edid_version_major = ddl_util::from_u8(reader)?;
        let edid_version_minor = ddl_util::from_u8(reader)?;
        Ok(Header {
            magic: magic,
            mfg_bytes: mfg_bytes,
            product_code: product_code,
            serial: serial,
            mfg_week: mfg_week,
            mfg_year_mod: mfg_year_mod,
            edid_version_major: edid_version_major,
            edid_version_minor: edid_version_minor,
        })
    }
}

