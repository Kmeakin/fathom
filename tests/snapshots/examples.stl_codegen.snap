// auto-generated: "ddl 0.1.0"

extern crate ddl_util;

use self::ddl_util::FromBinary;
use std::io;
use std::io::prelude::*;

#[derive(Debug, Clone)]
pub struct Vec3d {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}

impl FromBinary for Vec3d {
    fn from_binary<R: Read>(reader: &mut R) -> io::Result<Vec3d> {
        let x = ddl_util::from_f32le(reader)?;
        let y = ddl_util::from_f32le(reader)?;
        let z = ddl_util::from_f32le(reader)?;
        Ok::<_, io::Error>(Vec3d {
            x: x,
            y: y,
            z: z,
        })
    }
}

#[derive(Debug, Clone)]
pub struct Triangle {
    /// Normal vector
    pub normal: Vec3d,
    /// Coordinates of the vertices
    pub vertices: Vec<Vec3d>,
    /// Attribute byte count
    ///
    /// The attribute syntax is not documented in the formal specification. It is
    /// specified that the attribute byte count should be set to zero.
    pub attribute_bytes: u16,
}

impl FromBinary for Triangle {
    fn from_binary<R: Read>(reader: &mut R) -> io::Result<Triangle> {
        let normal = Vec3d::from_binary(reader)?;
        let vertices = ddl_util::from_array(0..3u8, || Vec3d::from_binary(reader))?;
        let attribute_bytes = ddl_util::from_u16le(reader)?;
        Ok::<_, io::Error>(Triangle {
            normal: normal,
            vertices: vertices,
            attribute_bytes: attribute_bytes,
        })
    }
}

/// https://en.wikipedia.org/wiki/STL_(file_format)
#[derive(Debug, Clone)]
pub struct Stl {
    /// Generally ignored
    pub header: Vec<u8>,
    /// Number of triangles that follow
    pub num_triangles: u32,
    /// The triangle data
    pub triangles: Vec<Triangle>,
}

impl FromBinary for Stl {
    fn from_binary<R: Read>(reader: &mut R) -> io::Result<Stl> {
        let header = ddl_util::from_array(0..80u8, || ddl_util::from_u8(reader))?;
        let num_triangles = ddl_util::from_u32le(reader)?;
        let triangles = ddl_util::from_array(0..num_triangles, || Triangle::from_binary(reader))?;
        Ok::<_, io::Error>(Stl {
            header: header,
            num_triangles: num_triangles,
            triangles: triangles,
        })
    }
}

