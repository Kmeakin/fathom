extern crate ddl_util;

use std::io;
use std::io::prelude::*;

#[derive(Debug, Clone)]
pub struct Stl {
    pub header: Vec<u8>,
    pub num_triangles: u32,
    pub triangles: Vec<Triangle>,
}

impl Stl {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<Stl> {
        let header = (0..80).map(|_| ddl_util::from_u8(reader)).collect::<Result<_, _>>()?;
        let num_triangles = ddl_util::from_u32le(reader)?;
        let triangles =
        (0..num_triangles).map(|_| Triangle::read(reader)).collect::<Result<_, _>>()?;
        Ok::<_, io::Error>(Stl {
            header: header,
            num_triangles: num_triangles,
            triangles: triangles,
        })
    }
}

#[derive(Debug, Clone)]
pub struct Triangle {
    pub normal: Vec3d,
    pub vertices: Vec<Vec3d>,
    pub attribute_bytes: u16,
}

impl Triangle {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<Triangle> {
        let normal = Vec3d::read(reader)?;
        let vertices = (0..3).map(|_| Vec3d::read(reader)).collect::<Result<_, _>>()?;
        let attribute_bytes = ddl_util::from_u16le(reader)?;
        Ok::<_, io::Error>(Triangle {
            normal: normal,
            vertices: vertices,
            attribute_bytes: attribute_bytes,
        })
    }
}

#[derive(Debug, Clone)]
pub struct Vec3d {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}

impl Vec3d {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<Vec3d> {
        let x = ddl_util::from_f32le(reader)?;
        let y = ddl_util::from_f32le(reader)?;
        let z = ddl_util::from_f32le(reader)?;
        Ok::<_, io::Error>(Vec3d {
            x: x,
            y: y,
            z: z,
        })
    }
}

