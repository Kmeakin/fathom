extern crate ddl_util;

use std::io;
use std::io::prelude::*;

pub struct Bitmap {
    pub extents: Bitmap::extents,
    pub data: Vec<Bitmap::data::Elem>,
}

impl Bitmap {
    pub fn read<R: Read>(reader: &mut R) -> io::Result<Bitmap> {
        let extents = {
            let width = ddl_util::from_u32be(reader)?;
            let height = ddl_util::from_u32be(reader)?;
            Ok(Bitmap {
                width: width,
                height: height,
            })
        }?;
        let data = (0..(extents.width * extents.height)).map(|_| {
            let r = ddl_util::from_u8(reader)?;
            let g = ddl_util::from_u8(reader)?;
            let b = ddl_util::from_u8(reader)?;
            let a = ddl_util::from_u8(reader)?;
            Ok(Bitmap::Elem {
                r: r,
                g: g,
                b: b,
                a: a,
            })
        }).collect::<Result<_, _>>()?;
        Ok(Bitmap {
            extents: extents,
            data: data,
        })
    }
}

pub struct BitmapDataElem {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}

pub struct BitmapExtents {
    pub width: u32,
    pub height: u32,
}

pub type Bmp = Bitmap;

