use std::io;
use std::io::prelude::*;

pub struct Bitmap {
    extents: Bitmap::extents,
    data: Vec<Bitmap::data::Elem>,
}

impl Bitmap {
    fn read<R: Read>(reader: &mut R) -> io::Result<Bitmap> {
        let data = (0..(extents.width * extents.height)).map(|_| {
            let a = buf.read_u8()?;
            let b = buf.read_u8()?;
            let g = buf.read_u8()?;
            let r = buf.read_u8()?;
            Ok(Bitmap::Elem {
                r: r,
                g: g,
                b: b,
                a: a,
            })
        }).collect::<Result<_, _>>()?;
        let extents = {
            let height = {
                let x = (0..4).map(|_| buf.read_u8()?).collect::<Result<_, _>>()?;
                Ok(from_u32be(x))
            };
            let width = {
                let x = (0..4).map(|_| buf.read_u8()?).collect::<Result<_, _>>()?;
                Ok(from_u32be(x))
            };
            Ok(Bitmap {
                width: width,
                height: height,
            })
        };
        Ok(Bitmap {
            extents: extents,
            data: data,
        })
    }
}

pub struct Bitmap::data::Elem {
    r: u8,
    g: u8,
    b: u8,
    a: u8,
}

pub struct Bitmap::extents {
    width: i64,
    height: i64,
}

pub type Bmp = Bitmap;

