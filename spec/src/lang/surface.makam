% Surface language
%
% This language is what we expect users of the language interact with directly.
% It includes convenience features such as implicit parameters and pattern
% matching to make binary data formats easier to describe.

%extend surface.

    % Patterns
    pattern : type.

    name : string -> pattern.
    record : map string pattern -> pattern.
    enum : string -> pattern.
    number : string -> pattern.
    string : string -> pattern.
    sequence : list pattern -> pattern.


    % Terms
    term : type.

    % Named terms
    name : string -> term.

    % Annotated terms
    ann : term -> term -> term.

    % Pattern matching
    match : term -> list (pattern * term) -> term.

    % Functions
    function_type : (option string * term) -> term -> term.     % Also known as: Pi type, Dependent product type
    function_intro : (string * option term) -> term -> term.    % Also known as: Lambda abstraction, anonymous function
    function_elim : term -> term -> term.                       % Also known as: Function application

    % Records
    record_type : list (string * term) -> term.
    record_intro : map string term -> term.
    record_elim : term -> string -> term.

    % Enumerations
    enum_type : set string -> term.
    enum_intro : string -> term.

    % Numeric literals
    number : string -> term.
    string : string -> term.
    sequence : list term -> term.

    % Arrays
    array_type : term -> term -> term.
    array_elim : term -> term -> term.

%end.
