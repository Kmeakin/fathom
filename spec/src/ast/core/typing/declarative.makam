% Declarative Typing
%
% This section defines the typing rules in a way that is close to a
% standard presentation of Martin-LÃ¶f Type Theory with explicit
% substitutions. The disadvantage of this description is that it's hard
% to derive an actual type checker implementation directly from these
% rules. We instead to this later on, by describing a bidirectional type
% checking algorithm in the `core.typing.bidirectional` namespace.

% Further reading:
%
% - https://intuitionistic.files.wordpress.com/2010/07/martin-lof-tt.pdf
% - http://www.cse.chalmers.se/research/group/logic/book/book.pdf

%extend declarative.

    % Declarative typing context
    context : type.

    % Empty typing context
    empty : context.
    % A typing context, extended with a new binding
    extend : context -> term -> context.


    is_context : context -> prop.
    is_type : context -> term -> prop.
    is_elem : context -> term -> term -> prop.
    %  is_subst : context -> subst -> context -> prop.
    is_equal_type : context -> term -> term -> prop.
    is_equal_elem : context -> term -> term -> term -> prop.
    %  is_equal_subst : context -> subst -> subst -> context -> prop.

    % Contexts
    is_context empty.
    is_context (extend Context Type) :-
        is_context Context,
        is_type Context Type.

    % Reflexivity
    is_equal_type Context Type Type :-
        is_type Context Type.
    is_equal_elem Context Elem Elem Type :-
        is_type Context Type.

    % Symmetry
    is_equal_type Context Type1 Type2 :-
        is_equal_type Context Type2 Type1.
    is_equal_elem Context Elem1 Elem2 Type :-
        is_equal_elem Context Elem2 Elem1 Type.

    % Transitivity
    is_equal_type Context Type1 Type3 :-
        is_equal_type Context Type1 Type2,
        is_equal_type Context Type2 Type3.
    is_equal_elem Context Elem1 Elem3 Type :-
        is_equal_elem Context Elem1 Elem2 Type,
        is_equal_elem Context Elem1 Elem3 Type.

    % Type Equality
    is_elem Context Elem Type2 :-
        is_elem Context Elem Type1,
        is_equal_type Context Type1 Type2.
    is_equal_elem Context Elem1 Elem2 Type2 :-
        is_equal_elem Context Elem1 Elem2 Type1,
        is_equal_type Context Type1 Type2.

    % Variables
    is_type (extend Context Type) (local 0) :-
        is_type Context Type.
    is_type (extend Context _) (local Index) :-
        plus PrevIndex 1 Index,
        is_type Context (local PrevIndex).
    is_elem (extend Context Type') (local 0) Type :-
        is_elem Context Type' Type.
    is_elem (extend Context _) (local Index) Type :-
        plus PrevIndex 1 Index,
        is_elem Context (local PrevIndex) Type.

    % Universes
    is_type Context type_type :-
        is_context Context.

    % Functions
    is_type Context (function_type InputType OutputType) :-
        is_type Context InputType,
        is_type (extend Context InputType) OutputType.
    is_elem Context (function_type InputType OutputType) type_type :-
        is_type Context InputType,
        is_type (extend Context InputType) OutputType.
    is_elem Context (function_intro OutputElem) (function_type InputType OutputType) :-
        is_type Context InputType,
        is_elem (extend Context InputType) OutputElem OutputType.
    %  is_elem Context (function_elim (function_intro OutputElem) InputElem) OutputType :- TODO.
    %  is_equal_elem Context (function_elim (function_intro OutputElem) InputElem) Elem OutputType :- TODO.

    % Pairs
    is_type Context (pair_type FirstType SecondType) :-
        is_elem Context FirstType type_type,
        is_elem (extend Context FirstType) SecondType type_type.
    is_elem Context (pair_type FirstType SecondType) type_type :-
        is_elem Context FirstType type_type,
        is_elem (extend Context FirstType) SecondType type_type.
    %  is_elem Context (pair_intro FirstElem SecondElem) (pair_type FirstType SecondType) :- TODO.
    %  is_elem Context (pair_elim_first (pair_intro FirstElem SecondElem)) FirstType :- TODO.
    %  is_elem Context (pair_elim_second (pair_intro FirstElem SecondElem)) SecondType :- TODO.
    %  is_equal_elem Context (pair_elim_first (pair_intro FirstElem SecondElem)) Elem FirstType :- TODO.
    %  is_equal_elem Context (pair_elim_second (pair_intro FirstElem SecondElem)) Elem SecondType :- TODO.

    % Records
    % TODO: record_type
    % TODO: record_intro
    % TODO: record_elim

    % Enumerations
    is_type Context (enum_type Labels) :-
        is_context Context.
    is_elem Context (enum_type Labels) type_type :-
        is_context Context.
    is_elem Context (enum_intro Label) (enum_type Labels) :-
        is_context Context,
        set.member Labels Label _.
    %  is_elem Context (enum_elim Clauses) (enum_type Labels) Type :- TODO.
    is_equal_type Context (enum_type Labels1) (enum_type Labels2) :-
        eqv Labels1 Labels2.
    is_equal_elem Context (enum_intro Label) (enum_intro Label) (enum_type Labels) :-
        set.member Labels Label _.
    %  is_equal_elem Context (enum_elim (enum_intro Label) Clauses) Term Type :- TODO.

    % Integers
    is_type Context int_type :-
        is_context Context.
    is_elem Context int_type type_type :-
        is_context Context.
    is_elem Context (int_intro _) int_type :-
        is_context Context.

    % Arrays
    is_type Context (array_type Type LenElem) :-
        is_elem Context Type type_type,
        is_elem Context LenElem int_type.
    is_elem Context (array_type Type LenElem) type_type :-
        is_elem Context Type type_type,
        is_elem Context LenElem int_type.
    is_elem Context (array_intro Elems) (array_type Type LenElem) :-
        is_equal_elem Context (int_intro Len) LenElem int_type,
        length Elems Len,
        map (fun elem => is_elem Context elem Type) Elems.
    is_equal_elem Context (array_elim (array_intro Elems) IndexElem) Elem Type :-
        % FIXME: ensure `IndexElem` is in array bounds, possibly with refinement types?
        is_equal_elem Context (int_intro Index) IndexElem int_type,
        map (fun elem => is_elem Context elem Type) Elems,
        list.nth Elems Index Elem.

    % Binary format descriptions
    is_type Context format_type :-
        is_context Context.
    is_elem Context format_intro_void format_type :-
        is_context Context.
    is_elem Context format_intro_unit format_type :-
        is_context Context.
    is_elem Context format_intro_u8 format_type :-
        is_context Context.
    is_elem Context format_intro_u16le format_type :-
        is_context Context.
    is_elem Context format_intro_u16be format_type :-
        is_context Context.
    is_elem Context format_intro_u32le format_type :-
        is_context Context.
    is_elem Context format_intro_u32be format_type :-
        is_context Context.
    is_elem Context format_intro_u64le format_type :-
        is_context Context.
    is_elem Context format_intro_u64be format_type :-
        is_context Context.
    is_elem Context format_intro_s8 format_type :-
        is_context Context.
    is_elem Context format_intro_s16le format_type :-
        is_context Context.
    is_elem Context format_intro_s16be format_type :-
        is_context Context.
    is_elem Context format_intro_s32le format_type :-
        is_context Context.
    is_elem Context format_intro_s32be format_type :-
        is_context Context.
    is_elem Context format_intro_s64le format_type :-
        is_context Context.
    is_elem Context format_intro_s64be format_type :-
        is_context Context.
    is_elem Context (format_intro_array Type LenElem) format_type :-
        is_elem Context Type format_type,
        is_elem Context LenElem int_type.
    is_elem Context (format_intro_pair FirstType SecondType) format_type :-
        is_elem Context FirstType format_type,
        is_elem (extend Context (format_elim FirstType)) SecondType format_type.
    % TODO: format_intro_record
    % TODO: format_intro_compute
    % TODO: format_intro_absorb
    is_equal_elem Context (format_elim format_intro_void) (enum_type []) type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_unit) (record_type []) type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_u8) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_u16le) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_u16be) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_u32le) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_u32be) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_u64le) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_u64be) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_s8) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_s16le) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_s16be) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_s32le) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_s32be) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_s64le) int_type type_type :-
        is_context Context.
    is_equal_elem Context (format_elim format_intro_s64be) int_type type_type :-
        is_context Context.
    is_equal_elem Context
        (format_elim (format_intro_array Type LenElem))
        (array_type Type' LenElem)
        format_type
    :-
        is_equal_elem Context (format_elim Type) Type' type_type.
    % TODO: format_intro_pair
    % TODO: format_intro_record
    % TODO: format_intro_compute
    % TODO: format_intro_absorb

%end.
