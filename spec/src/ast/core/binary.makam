% Binary interpretation of format descriptions

%extend binary.

    byte : type.


    % Decoding byte sequences into terms, guided by a format description

    interpret : semantics.value -> semantics.value -> list byte -> prop.
    interpret semantics.format_intro_unit (semantics.enum_intro "unit") [].
    interpret semantics.format_intro_u8 (semantics.int_intro TODO) [Byte0].
    interpret semantics.format_intro_u16le (semantics.int_intro TODO) [Byte0, Byte1].
    interpret semantics.format_intro_u16be (semantics.int_intro TODO) [Byte0, Byte1].
    interpret semantics.format_intro_u32le (semantics.int_intro TODO) [Byte0, Byte1, Byte2, Byte3].
    interpret semantics.format_intro_u32be (semantics.int_intro TODO) [Byte0, Byte1, Byte2, Byte3].
    interpret semantics.format_intro_u64le (semantics.int_intro TODO) [Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7, Byte8].
    interpret semantics.format_intro_u64be (semantics.int_intro TODO) [Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7, Byte8].
    interpret semantics.format_intro_s8 (semantics.int_intro TODO) [Byte0].
    interpret semantics.format_intro_s16le (semantics.int_intro TODO) [Byte0, Byte1].
    interpret semantics.format_intro_s16be (semantics.int_intro TODO) [Byte0, Byte1].
    interpret semantics.format_intro_s32le (semantics.int_intro TODO) [Byte0, Byte1, Byte2, Byte3].
    interpret semantics.format_intro_s32be (semantics.int_intro TODO) [Byte0, Byte1, Byte2, Byte3].
    interpret semantics.format_intro_s64le (semantics.int_intro TODO) [Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7, Byte8].
    interpret semantics.format_intro_s64be (semantics.int_intro TODO) [Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7, Byte8].
    interpret (semantics.format_intro_array ElemType Len) (semantics.array_intro TODO) Bytes.
    interpret
        (semantics.format_intro_pair FirstType Closure)
        (semantics.pair_intro FirstElem SecondElem)
        PairBytes
    :-
        interpret FirstType FirstElem FirstBytes,
        semantics.apply Closure FirstElem SecondType,
        interpret SecondType SecondElem SecondBytes,
        append FirstBytes SecondBytes PairBytes.
    interpret
        (semantics.format_intro_record (semantics.field_closure Values ((Label, FirstType) :: TypeFields)))
        (semantics.record_intro ((Label, Elem) :: ElemFields))
        RecordBytes
    :-
        semantics.eval Values FirstType FirstType',
        interpret FirstType' Elem FirstBytes,
        interpret
            (semantics.format_intro_record (semantics.field_closure (Elem :: Values) TypeFields))
            (semantics.record_intro ElemFields)
            RestBytes,
        append FirstBytes RestBytes RecordBytes.

%end.
