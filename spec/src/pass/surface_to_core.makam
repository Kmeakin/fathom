% Bidirectional elaboration of the surface syntax into core terms
%
% Here we describe how we elaborate the surface language into the core
% language. This involves doing a number of things, including:
%
% - desugaring
% - unification
% - pattern compilation
% - etc.

%extend surface_to_core.

    %open fathom.lang.
    %open fathom.lang.core.semantics.


    context : type.

    context : list (option string * int * value * value) -> context.

    %extend context.

        values : context -> list value -> prop.
        values (context Entries) Values :-
            map (pfun ( _, _, Elem, _ ) Elem => success) Entries Values.


        lookup_type : context -> string -> int -> value -> prop.
        lookup_type (context Entries) Name Level Type :-
            contains ( some Name, Level, _, Type ) Entries.


        next_local : context -> value -> prop.
        next_local (context Entries) (neutral (local Level)) :-
            length Entries Level.


        add_local : context -> (option string * value * value) -> context -> prop.
        add_local (context Entries) ( Name, Elem, Type )
            (context (( Name, Level, Elem, Type ) :: Entries))
        :-
            length Entries Level.


        add_param : context -> (option string * value) -> context -> prop.
        add_param Context ( Name, Type ) Context' :-
            next_local Context Elem,
            add_local Context ( Name, Elem, Type ) Context'.


        eval : context -> core.term -> value -> prop.
        eval Context Elem Elem' :-
            values Context Values,
            eval Values Elem Elem'.


        readback : context -> value -> core.term -> prop.
        readback Context Elem Elem' :-
            length Entries Length,
            readback Length Elem Elem'.


        is_equal : context -> value -> value -> prop.
        is_equal (context Entries) Elem1 Elem2 :-
            length Entries Length,
            is_equal Length Elem1 Elem2.

    %end.


    % Elaboration rules

    % Check that a term is a type and elaborate it to a core term.
    is_type : context -> surface.term -> core.term -> prop.
    % Check that a term is an element of the given type and elaborate it to a core term.
    check_type : context -> surface.term -> value -> core.term -> prop.
    % Synthesize the type of a given term and elaborate it to a core term.
    synth_type : context -> surface.term -> value -> core.term -> prop.

    % A note on modes
    %
    % Makam does not support mode declarations (like in Mercury), but if it did
    % we'd assign the following mode declarations to the above predicates:
    %
    % ```
    % is_type : in -> in -> out -> semidet.
    % check_type : in -> in -> in -> out -> semidet.
    % synth_type : in -> in -> out -> out -> semidet.
    % ```

    % Conversion
    is_type Context SourceElem TargetElem:-
        check_type Context SourceElem type_type TargetElem.
    is_type Context SourceElem TargetElem :-
        check_type Context SourceElem format_type TargetElem.
    check_type Context SourceElem TargetType TargetElem :-
        synth_type Context SourceElem TargetType' TargetElem,
        context.is_equal Context TargetType TargetType'.

    % Names
    is_type Context (surface.name "Type") core.type_type.
    is_type Context (surface.name "Format") core.format_type.
    is_type Context (surface.name "Int") core.int_type.
    synth_type Context (surface.name "Int") type_type core.int_type.
    synth_type Context (surface.name "U8") format_type core.format_intro_u8.
    synth_type Context (surface.name "U16le") format_type core.format_intro_u16le.
    synth_type Context (surface.name "U16be") format_type core.format_intro_u16be.
    synth_type Context (surface.name "U32le") format_type core.format_intro_u32le.
    synth_type Context (surface.name "U32be") format_type core.format_intro_u32be.
    synth_type Context (surface.name "U64le") format_type core.format_intro_u64le.
    synth_type Context (surface.name "U64be") format_type core.format_intro_u64be.
    synth_type Context (surface.name "S8") format_type core.format_intro_s8.
    synth_type Context (surface.name "S16le") format_type core.format_intro_s16le.
    synth_type Context (surface.name "S16be") format_type core.format_intro_s16be.
    synth_type Context (surface.name "S32le") format_type core.format_intro_s32le.
    synth_type Context (surface.name "S32be") format_type core.format_intro_s32be.
    synth_type Context (surface.name "S64le") format_type core.format_intro_s64le.
    synth_type Context (surface.name "S64be") format_type core.format_intro_s64be.
    synth_type Context (surface.name Name) TargetType (core.local Level) :-
        context.lookup_type Context Name Level TargetType.

    % Annotated terms
    synth_type Context (surface.ann SourceElem SourceType) TargetType'
        (core.ann TargetElem TargetType)
    :-
        is_type Context SourceType TargetType,
        context.eval Context TargetType TargetType',
        check_type Context SourceElem TargetType' TargetElem.

    % Pattern matching
    %  check_type Context (surface.match SourceElem SourceClauses) TargetType TODO' :- TODO''.

    % Functions
    is_type Context (surface.function_type (surface.ann (surface.name Name) SourceInputType) SourceOutputType)
        (core.function_type TargetInputType TargetOutputType)
    :-
        is_type Context SourceInputType TargetInputType,
        context.eval Context TargetInputType TargetInputType',
        context.add_param Context ( some Name, TargetInputType' ) Context',
        is_type Context' SourceOutputType TargetOutputType.
    synth_type Context (surface.function_type (surface.ann (surface.name Name) SourceInputType) SourceOutputType) type_type
        (core.function_type TargetInputType TargetOutputType)
    :-
        is_type Context SourceInputType TargetInputType,
        context.eval Context TargetInputType TargetInputType',
        context.add_param Context ( some Name, TargetInputType' ) Context',
        is_type Context' SourceOutputType TargetOutputType.
    check_type Context (surface.function_intro (surface.name Name) SourceOutputElem)
        (function_type TargetInputType Closure)
        (core.function_intro TargetInputType' TargetOutputElem)
    :-
        context.next_local Context LocalElem,
        apply Closure LocalElem TargetOutputType,
        context.add_param Context ( some Name, TargetInputType ) Context',
        context.readback Context TargetInputType TargetInputType',
        check_type Context' SourceOutputElem TargetOutputType TargetOutputElem.
    synth_type Context
        (surface.function_intro (surface.ann (surface.name Name) SourceInputType) SourceOutputElem)
        (function_type TargetInputType' (closure TargetValues TargetOutputType'))
        (core.function_intro TargetInputType TargetOutputElem)
    :-
        is_type Context SourceInputType TargetInputType,
        context.eval Context TargetInputType TargetInputType',
        context.add_param Context ( some Name, TargetInputType' ) Context',
        synth_type Context' SourceOutputElem TargetOutputType TargetOutputElem,
        context.values Context' TargetValues,
        context.readback Context' TargetOutputType TargetOutputType'.
    synth_type Context (surface.function_elim SourceElem SourceInputElem) TargetOutputType
        (core.function_elim TargetElem TargetInputElem)
    :-
        synth_type Context SourceElem (function_type InputType Closure) TargetElem,
        check_type Context SourceInputElem InputType TargetInputElem,
        context.eval Context TargetInputElem TargetInputElem',
        apply Closure TargetInputElem' TargetOutputType.

    % Records
    is_type Context (surface.record_type []) (core.record_type []).
    is_type Context (surface.record_type (( Label, SourceType ) :: SourceTypeFields))
        (core.record_type (( Label, TargetType ) :: TargetTypeFields))
    :-
        not (contains ( Label, _ ) SourceTypeFields),
        check_type Context SourceType type_type TargetType,
        context.eval Context TargetType TargetType',
        context.add_param Context ( some Label, TargetType' ) Context',
        check_type Context' (surface.record_type SourceTypeFields) type_type
            (core.record_type TargetTypeFields).
    check_type Context (surface.record_type []) type_type (core.record_type []).
    check_type Context (surface.record_type (( Label, SourceType ) :: SourceTypeFields)) type_type
        (core.record_type (( Label, TargetType ) :: TargetTypeFields))
    :-
        not (contains ( Label, _ ) SourceTypeFields),
        check_type Context SourceType type_type TargetType,
        context.eval Context TargetType TargetType',
        context.add_param Context ( some Label, TargetType' ) Context',
        check_type Context' (surface.record_type SourceTypeFields) type_type
            (core.record_type TargetTypeFields).
    check_type Context (surface.record_type []) format_type (core.format_intro_record []).
    check_type Context (surface.record_type (( Label, SourceType ) :: SourceTypeFields)) format_type
        (core.format_intro_record (( Label, TargetType ) :: TargetTypeFields))
    :-
        not (contains ( Label, _ ) SourceTypeFields),
        check_type Context SourceType format_type TargetType,
        context.eval Context (core.format_elim TargetType) TargetType',
        context.add_param Context ( some Label, TargetType' ) Context',
        check_type Context' (surface.record_type SourceTypeFields) format_type
            (core.record_type TargetTypeFields).
    check_type Context (surface.record_intro []) (record_type (field_closure TargetValues []))
        (core.record_intro [] []).
    check_type Context
        (surface.record_intro SourceElemFields)
        (record_type (field_closure TargetValues (( Label, TargetType ) :: TargetTypeFields)))
        (core.record_intro
            (( Label, TargetElem ) :: TargetElemFields)
            (( Label, TargetType ) :: TargetTypeFields))
    :-
        map.remove SourceElemFields Label SourceElem SourceElemFields',
        eval Values TargetType TargetType',
        check_type Context SourceElem TargetType' TargetElem,
        context.eval Context TargetElem TargetElem',
        context.add_local Context ( some Label, TargetElem', TargetType' ) Context',
        eq FieldClosure (field_closure (TargetElem' :: TargetValues) TargetTypeFields),
        check_type Context' (surface.record_intro SourceElemFields') (record_type FieldClosure)
            (core.record_intro TargetElemFields _).

    synth_type Context (surface.record_elim SourceRecordElem Label) TargetFieldType
        (core.record_elim TargetRecordElem Label)
    :-
        synth_type Context SourceRecordElem (record_type FieldClosure) TargetRecordElem,
        context.eval Context TargetRecordElem TargetRecordElem',
        record_elim_type TargetRecordElem' Label FieldClosure TargetFieldType.

    % Enumerations
    is_type Context (surface.enum_type Labels) (core.enum_type Labels).
    synth_type Context (surface.enum_type Labels) type_type (core.enum_type Labels).
    check_type Context (surface.enum_intro Label) (enum_type Labels)
        (core.enum_intro Label Labels)
    :-
        set.member Labels Label _.

    % Literals
    %  check_type Context (surface.number Data) int_type (core.int_intro Int) :- TODO.
    %  check_type Context (surface.string Data) TODO TODO' :- TODO''.
    %  check_type Context (surface.sequence SourceElems) (array_type TargetType TargetLenElem) (core.array_intro TargetElems) :- TODO.

%end.
