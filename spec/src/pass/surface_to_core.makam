% Bidirectional elaboration of the surface syntax into core terms
%
% Here we describe how we elaborate the surface language into the core
% language. This involves doing a number of things, including:
%
% - desugaring
% - unification
% - pattern compilation
% - etc.

%extend surface_to_core.

    %open fathom.lang.
    %open fathom.lang.core.semantics.


    context : type.

    context : list (option string * int * value * value) -> context.

    %extend context.

        values : context -> list value -> prop.
        values (context Entries) Values :-
            map (pfun ( _, _, Elem, _ ) Elem => success) Entries Values.


        lookup_type : context -> string -> int -> value -> prop.
        lookup_type (context Entries) Name Level Type :-
            contains ( some Name, Level, _, Type ) Entries.


        next_local : context -> value -> prop.
        next_local (context Entries) (neutral (local Level)) :-
            length Entries Level.


        add_local : context -> (option string * value * value) -> context -> prop.
        add_local (context Entries) ( Name, Elem, Type )
            (context (( Name, Level, Elem, Type ) :: Entries))
        :-
            length Entries Level.


        add_param : context -> (option string * value) -> context -> prop.
        add_param Context ( Name, Type ) Context' :-
            next_local Context Elem,
            add_local Context ( Name, Elem, Type ) Context'.


        eval : context -> core.term -> value -> prop.
        eval Context Elem Elem' :-
            values Context Values,
            eval Values Elem Elem'.


        is_equal : context -> value -> value -> prop.
        is_equal (context Entries) Elem1 Elem2 :-
            length Entries Length,
            is_equal Length Elem1 Elem2.

    %end.


    % Elaboration rules

    % Check that a term is a type and elaborate it to a core term.
    is_type : context -> surface.term -> core.term -> prop.
    % Check that a term is an element of the given type and elaborate it to a core term.
    check_type : context -> surface.term -> value -> core.term -> prop.
    % Synthesize the type of a given term and elaborate it to a core term.
    synth_type : context -> surface.term -> value -> core.term -> prop.

    % A note on modes
    %
    % Makam does not support mode declarations (like in Mercury), but if it did
    % we'd assign the following mode declarations to the above predicates:
    %
    % ```
    % is_type : in -> in -> out -> semidet.
    % check_type : in -> in -> in -> out -> semidet.
    % synth_type : in -> in -> out -> out -> semidet.
    % ```

    % Conversion
    is_type Context SourceElem TargetElem:-
        check_type Context SourceElem type_type TargetElem.
    is_type Context SourceElem TargetElem :-
        check_type Context SourceElem format_type TargetElem.
    check_type Context SourceElem TargetType TargetElem :-
        synth_type Context SourceElem TargetType' TargetElem,
        context.is_equal Context TargetType TargetType'.

    % Variables
    synth_type Context (surface.name "Type") TargetType core.type_type.
    synth_type Context (surface.name "Format") TargetType core.format_type.
    synth_type Context (surface.name Name) TargetType (core.local Level) :-
        context.lookup_type Context Name Level TargetType.

    % Annotated terms
    synth_type Context (surface.ann SourceElem SourceType) TargetType'
        (core.ann TargetElem TargetType)
    :-
        is_type Context SourceType TargetType,
        context.eval Context TargetType TargetType',
        check_type Context SourceElem TargetType' TargetElem.

    % Functions
    is_type Context (surface.function_type ( Name, SourceInputType ) SourceOutputType)
        (core.function_type TargetInputType TargetOutputType)
    :-
        is_type Context SourceInputType TargetInputType,
        context.eval Context TargetInputType TargetInputType',
        context.add_param Context ( Name, TargetInputType' ) Context',
        is_type Context' SourceOutputType TargetOutputType.
    synth_type Context (surface.function_type ( Name, SourceInputType ) SourceOutputType) type_type
        (core.function_type TargetInputType TargetOutputType)
    :-
        is_type Context SourceInputType TargetInputType,
        context.eval Context TargetInputType TargetInputType',
        context.add_param Context ( Name, TargetInputType' ) Context',
        is_type Context' SourceOutputType TargetOutputType.
    check_type Context (surface.function_intro ( Name, none ) SourceOutputElem)
        (function_type TargetInputType Closure)
        (core.function_intro TargetOutputElem)
    :-
        context.next_local Context LocalElem,
        apply Closure LocalElem TargetOutputType,
        context.add_param Context ( some Name, TargetInputType ) Context',
        check_type Context' SourceOutputElem TargetOutputType TargetOutputElem.
    %  synth_type Context (surface.function_intro ( Name, some SourceInputType ) SourceOutputElem)
    %      (function_type TargetInputType Closure)
    %      (core.function_intro TargetOutputElem)
    %  :- TODO.
    synth_type Context (surface.function_elim SourceElem SourceInputElem) TargetOutputType
        (core.function_elim TargetElem TargetInputElem)
    :-
        synth_type Context SourceElem (function_type InputType Closure) TargetElem,
        check_type Context SourceInputElem InputType TargetInputElem,
        context.eval Context TargetInputElem TargetInputElem',
        apply Closure TargetInputElem' TargetOutputType.

    % Pairs
    % Records
    % Enumerations
    % Integers
    % Arrays
    % Binary format descriptions

%end.
