% Bidirectional stratification of the core language.

%extend core_to_stratified.

    %open fathom.ast.
    %open fathom.ast.stratified.semantics.


    % Stratified terms
    stratified : type.

    kind : stratified.kind -> stratified.
    type' : stratified.type' -> stratified.
    term : stratified.term -> stratified.

    % Stratified universes
    universe : type.

    type' : universe.
    term : universe.


    % Stratification context.
    %
    % We just need to keep track of the universe of variables in order to
    % separate them into kinds, types, and terms.
    context : type.

    context : list universe -> context.

    %extend context.

        lookup_universe : context -> int -> universe -> prop.
        lookup_universe (context Entries) Index Universe :-
            list.nth Entries Index Universe.

    %end.


    % Stratify a term into a kind.
    from_term_to_kind : context -> core.term -> stratified.kind -> prop.
    % Stratify a term into a type.
    from_term_to_type : context -> core.term -> stratified.type' -> prop.
    % Stratify a term into a term.
    from_term_to_term : context -> core.term -> stratified.term -> prop.
    % Stratify a term into a kind, type, or term.
    from_term : context -> core.term -> stratified -> prop.

    % Conversion
    from_term_to_kind Context Source Target :-
        from_term Context Source (kind Target).
    from_term_to_kind Context Source (stratified.lift Target) :-
        from_term Context Source (type' Target).
    from_term_to_type Context Source Target :-
        from_term Context Source (type' Target).
    from_term_to_type Context Source (stratified.lift Target) :-
        from_term Context Source (term Target).
    from_term_to_term Context Source Target :-
        from_term Context Source (term Target).

    % Variables
    from_term Context (core.local Index) (type' (stratified.local Int)) :-
        context.lookup_universe Context Index type'.
    from_term Context (core.local Index) (term (stratified.local Int)) :-
        context.lookup_universe Context Index term.

    % Annotated terms
    from_term Context (core.ann SourceElem SourceType)
        (type' (stratified.ann TargetElem TargetType))
    :-
        from_term Context SourceType (kind TargeType),
        from_term Context SourceElem (type' TargetElem).
    from_term Context (core.ann SourceElem SourceType)
        (term (stratified.ann TargetElem TargetType))
    :-
        from_term Context SourceType (type' TargetType),
        from_term_to_term Context SourceElem TargetElem.

    % Universes
    from_term Context core.type_type (kind stratified.type_type).

    % Functions
    % Pairs
    % Records

    % Enumerations
    from_term Context (core.enum_type Labels) (type' (stratified.enum_type Labels)).
    from_term Context (core.enum_intro Label) (term (stratified.enum_intro Label)).
    % TODO: core.enum_elim (type)
    % TODO: core.enum_elim (term)

    % Integers
    from_term Context core.int_type (type' stratified.int_type).
    from_term Context (core.int_intro Int) (term (stratified.int_intro Int)).

    % Arrays
    from_term Context (core.array_type SourceType SourceLenElem)
        (type' (stratified.array_type TargetType TargetLenElem))
    :-
        from_term_to_type Context SourceType TargetType,
        from_term_to_term Context SourceLenElem TargetLenElem.
    from_term Context (core.array_intro SourceElems) (term (stratified.array_intro TargetElems)) :-
        map (pfun SourceElem TargetElem =>
            from_term_to_term Context SourceElem TargetElem
        ) SourceElems TargetElems.
    from_term Context (core.array_elim SourceArrayElem SourceIndexElem)
        (term (stratified.array_elim TargetArrayElem TargetIndexElem))
    :-
        from_term_to_term Context SourceArrayElem TargetArrayElem,
        from_term_to_term Context SourceIndexElem TargetIndexElem.

    % Binary format descriptions
    from_term Context core.format_type (type' stratified.format_type).
    from_term Context core.format_intro_unit (term stratified.format_intro_unit).
    from_term Context core.format_intro_u8 (term stratified.format_intro_u8).
    from_term Context core.format_intro_u16le (term stratified.format_intro_u16le).
    from_term Context core.format_intro_u16be (term stratified.format_intro_u16be).
    from_term Context core.format_intro_u32le (term stratified.format_intro_u32le).
    from_term Context core.format_intro_u32be (term stratified.format_intro_u32be).
    from_term Context core.format_intro_u64le (term stratified.format_intro_u64le).
    from_term Context core.format_intro_u64be (term stratified.format_intro_u64be).
    from_term Context core.format_intro_s8 (term stratified.format_intro_s8).
    from_term Context core.format_intro_s16le (term stratified.format_intro_s16le).
    from_term Context core.format_intro_s16be (term stratified.format_intro_s16be).
    from_term Context core.format_intro_s32le (term stratified.format_intro_s32le).
    from_term Context core.format_intro_s32be (term stratified.format_intro_s32be).
    from_term Context core.format_intro_s64le (term stratified.format_intro_s64le).
    from_term Context core.format_intro_s64be (term stratified.format_intro_s64be).
    from_term Context (core.format_intro_array SourceType SourceLenElem)
        (term (stratified.format_intro_array TargetType TargetLenElem))
    :-
        from_term_to_term Context SourceType TargetType,
        from_term_to_term Context SourceLenElem TargetLenElem.
    % TODO: core.format_intro_pair
    % TODO: core.format_intro_record
    from_term Context (core.format_intro_compute SourceElem SourceType)
        (term (stratified.format_intro_compute TargetElem TargetType))
    :-
        from_term_to_type Context SourceType TargetType,
        from_term_to_term Context SourceElem TargetElem.
    from_term Context (core.format_intro_absorb SourceType)
        (term (stratified.format_intro_absorb TargetType))
    :-
        from_term_to_term Context SourceType TargetType.
    from_term Context (core.format_elim SourceType) (type' (stratified.format_elim TargetType)) :-
        from_term_to_term Context SourceType TargetType.


    % Convenience predicates

    from_term_to_kind : core.term -> stratified.kind -> prop.
    from_term_to_kind Source Target :-
        from_term_to_kind (context []) Source Target.

    from_term_to_type : core.term -> stratified.type' -> prop.
    from_term_to_type Source Target :-
        from_term_to_type (context []) Source Target.

    from_term_to_term : core.term -> stratified.term -> prop.
    from_term_to_term Source Target :-
        from_term_to_term (context []) Source Target.

    from_term : core.term -> stratified -> prop.
    from_term Source Target :-
        from_term (context []) Source Target.

%end.
