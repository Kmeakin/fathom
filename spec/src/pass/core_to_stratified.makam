% Bidirectional stratification of the core language.

%extend core_to_stratified.

    %open fathom.ast.
    %open fathom.ast.stratified.semantics.

    % Stratified terms
    stratified : type.

    kind : stratified.kind -> stratified.
    type' : stratified.type' -> stratified.
    term : stratified.term -> stratified.
    format : stratified.format -> stratified.

    % Stratified values
    value : type.

    kind : kind_value -> value.
    type' : typ_value -> value.
    term : term_value -> value.


    context : type.

    %extend context.

        eval : context -> stratified -> value -> prop.

        is_equal : context -> value -> value -> prop.

    %end.


    % Check that a term is a type and lower it to a stratified term.
    is_type : context -> core.term -> stratified -> prop.
    % Check that a term is an element of the given type and lower it to a stratified term.
    check_type : context -> core.term -> value -> stratified -> prop.
    % Synthesize the type of a given term and lower it to a stratified term.
    synth_type : context -> core.term -> value -> stratified -> prop.

    % A note on modes
    %
    % Makam does not support mode declarations (like in Mercury), but if it did
    % we'd assign the following mode declarations to the above predicates:
    %
    % ```
    % is_type : in -> in -> out -> semidet.
    % check_type : in -> in -> in -> out -> semidet.
    % synth_type : in -> in -> out -> out -> semidet.
    % ```

    % Conversion
    is_type Context Elem Elem' :-
        check_type Context Elem (kind type_type) Elem'.
    is_type Context Elem Elem' :-
        check_type Context Elem (kind format_type) Elem'.
    check_type Context Elem Type Elem' :-
        synth_type Context Elem Type' Elem',
        context.is_equal Context Type Type'.

    % Variables

    % Annotated terms
    is_type Context (core.ann Elem Type) Elem' :-
        is_type Context Type Kind,
        context.eval Context Kind Kind',
        check_type Context Elem Type' Elem'.

    % Universes
    is_type Context core.type_type (kind stratified.type_type).

    % Functions
    % Pairs

    % Enumerations
    is_type Context (core.enum_type Labels) (type' (stratified.enum_type Labels)).
    synth_type Context (core.enum_type Labels) (kind type_type) (type' (stratified.enum_type Labels)).
    check_type Context (core.enum_intro Label) (type' (enum_type Labels)) (term (stratified.enum_intro Label)) :-
        set.member Labels Label _.
    % TODO: core.enum_elim

    % Integers
    is_type Context core.int_type (type' stratified.int_type).
    synth_type Context core.int_type (kind type_type) (type' stratified.int_type).
    synth_type Context (core.int_intro Int) (type' int_type) (term (stratified.int_intro Int)).

    % Arrays
    is_type Context (core.array_type Type LenElem)
        (type' (stratified.array_type Type' LenElem'))
    :-
        check_type Context Type (kind type_type) (type' Type'),
        check_type Context LenElem (type' int_type) (term LenElem').
    check_type Context (core.array_type Type LenElem) (kind type_type)
        (type' (stratified.array_type Type' LenElem'))
    :-
        check_type Context Type (kind type_type) (type' Type'),
        check_type Context LenElem (type' int_type) (term LenElem').
    check_type Context (core.array_intro Elems) (type' (array_type Type (int_intro Len)))
        (term (stratified.array_intro Elems'))
    :-
        length Elems Len,
        map (fun elem_term elem_term' =>
            check_type Context elem_term (type' Type) (term elem_term')
        ) Elems Elems'.
    synth_type Context (core.array_elim ArrayElem IndexElem) (type' Type)
        (term (stratified.array_elim ArrayElem' IndexElem'))
    :-
        % FIXME: ensure `IndexElem` is in array bounds, possibly with refinement types?
        synth_type Context ArrayElem (type' (array_type Type _)) (term ArrayElem'),
        check_type Context IndexElem (type' int_type) (term IndexElem').

    % Binary format descriptions
    is_type Context core.format_type (kind stratified.format_type).
    synth_type Context core.format_intro_unit (kind format_type) (format stratified.format_intro_unit).
    synth_type Context core.format_intro_u8 (kind format_type) (format stratified.format_intro_u8).
    synth_type Context core.format_intro_u16le (kind format_type) (format stratified.format_intro_u16le).
    synth_type Context core.format_intro_u16be (kind format_type) (format stratified.format_intro_u16be).
    synth_type Context core.format_intro_u32le (kind format_type) (format stratified.format_intro_u32le).
    synth_type Context core.format_intro_u32be (kind format_type) (format stratified.format_intro_u32be).
    synth_type Context core.format_intro_u64le (kind format_type) (format stratified.format_intro_u64le).
    synth_type Context core.format_intro_u64be (kind format_type) (format stratified.format_intro_u64be).
    synth_type Context core.format_intro_s8 (kind format_type) (format stratified.format_intro_s8).
    synth_type Context core.format_intro_s16le (kind format_type) (format stratified.format_intro_s16le).
    synth_type Context core.format_intro_s16be (kind format_type) (format stratified.format_intro_s16be).
    synth_type Context core.format_intro_s32le (kind format_type) (format stratified.format_intro_s32le).
    synth_type Context core.format_intro_s32be (kind format_type) (format stratified.format_intro_s32be).
    synth_type Context core.format_intro_s64le (kind format_type) (format stratified.format_intro_s64le).
    synth_type Context core.format_intro_s64be (kind format_type) (format stratified.format_intro_s64be).
    % TODO: core.format_intro_array
    % TODO: core.format_intro_pair
    % TODO: core.format_intro_record
    % TODO: core.format_intro_compute
    % TODO: core.format_intro_absorb
    % TODO: core.format_elim

%end.
