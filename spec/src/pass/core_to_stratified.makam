% Bidirectional stratification of the core language.

%extend core_to_stratified.

    %open fathom.lang.
    %open fathom.lang.stratified.semantics.


    % Stratified terms
    term : type.

    term2 : stratified.term2 -> term.
    term1 : stratified.term1 -> term.
    term0 : stratified.term0 -> term.

    % Stratified universes
    universe : type.

    term2 : universe.
    term1 : universe.


    % Stratification context.
    %
    % We just need to keep track of the universe of variable term1s.
    context : type.

    context : list universe -> context.

    %extend context.

        lookup_universe : context -> int -> universe -> prop.
        lookup_universe (context Entries) Index Universe :-
            list.nth Entries Index Universe.

        add_binding : context -> universe -> context -> prop.
        add_binding (context Entries) Universe (context (Universe :: Entries)).

    %end.


    % Stratify a term into a term2.
    from_term_to_term2 : context -> core.term -> stratified.term2 -> prop.
    % Stratify a term into a term1.
    from_term_to_term1 : context -> core.term -> stratified.term1 -> prop.
    % Stratify a term into a term0.
    from_term_to_term0 : context -> core.term -> stratified.term0 -> prop.
    % Stratify a term into a term2, term1, or term0.
    from_term : context -> core.term -> term -> prop.

    % Conversion
    from_term_to_term2 Context Source Target :-
        from_term Context Source (term2 Target).
    from_term_to_term1 Context Source Target :-
        from_term Context Source (term1 Target).
    from_term_to_term0 Context Source Target :-
        from_term Context Source (term0 Target).

    % Variables
    from_term Context (core.local Index) (term1 (stratified.local Index)) :-
        context.lookup_universe Context Index term2.
    from_term Context (core.local Index) (term0 (stratified.local Index)) :-
        context.lookup_universe Context Index term1.

    % Annotated terms
    from_term Context (core.ann SourceElem SourceType)
        (term1 (stratified.ann TargetElem TargetType))
    :-
        from_term Context SourceType (term2 TargetType),
        from_term Context SourceElem (term1 TargetElem).
    from_term Context (core.ann SourceElem SourceType)
        (term0 (stratified.ann TargetElem TargetType))
    :-
        from_term Context SourceType (term1 TargetType),
        from_term_to_term0 Context SourceElem TargetElem.

    % Universes
    from_term Context core.type_type (term2 stratified.type_type).

    % Functions
    %  from_term Context (core.function_term1 SourceInputType SourceOutputType) (term2 (stratified.function_term1 TargetInputType TargetOutputType)) :- TODO.
    %  from_term Context (core.function_term1 SourceInputType SourceOutputType) (term1 (stratified.function_term1 TargetInputType TargetOutputType)) :- TODO.
    %  from_term_to_term1 Context (core.function_intro SourceOutputElem) (stratified.function_intro TargetOutputElem) :- TODO.
    %  from_term_to_term0 Context (core.function_intro SourceOutputElem) (stratified.function_intro TargetOutputElem) :- TODO.
    %  from_term Context (core.function_elim SourceElem SourceInputElem) (term1 (core.function_elim TargetElem TargetInputElem)) :- TODO.
    %  from_term Context (core.function_elim SourceElem SourceInputElem) (term0 (core.function_elim TargetElem TargetInputElem)) :- TODO.

    % Records
    from_term Context (core.record_type []) (term1 (stratified.record_type [])).
    from_term Context (core.record_type (( Label, SourceType ) :: SourceTypeFields))
        (term1 (stratified.record_type (( Label, TargetType ) :: TargetTypeFields)))
    :-
        from_term_to_term1 Context SourceType TargetType,
        context.add_binding Context term1 Context',
        from_term_to_term1 Context'
            (core.record_type SourceTypeFields)
            (stratified.record_type TargetTypeFields).
    from_term Context (core.record_intro [] []) (term0 (stratified.record_intro [] [])).
    from_term Context
        (core.record_intro SourceElemFields (( Label, SourceType ) :: SourceTypeFields))
        (term0
            (stratified.record_intro
                (( Label, TargetElem ) :: TargetElemFields)
                (( Label, TargetType ) :: TargetTypeFields)))
    :-
        map.remove SourceElemFields Label SourceElem SourceElemFields',
        from_term_to_term0 Context SourceElem TargetElem,
        from_term_to_term1 Context SourceType TargetType,
        context.add_binding Context term1 Context',
        from_term_to_term0 Context'
            (core.record_intro SourceElemFields' SourceTypeFields)
            (stratified.record_intro TargetElemFields TargetTypeFields).
    from_term Context (core.record_elim SourceRecordElem Label)
        (term0 (stratified.record_elim TargetRecordElem Label))
    :-
        from_term_to_term0 Context SourceRecordElem TargetRecordElem.

    % Enumerations
    from_term Context (core.enum_type Labels) (term1 (stratified.enum_type Labels)).
    from_term Context (core.enum_intro Label Labels) (term0 (stratified.enum_intro Label Labels)).
    from_term_to_term1 Context (core.enum_elim SourceClauses) (stratified.enum_elim TargetClauses) :-
        map.mapvalues (pfun SourceElem TargetElem =>
            from_term_to_term1 Context SourceElem TargetElem
        ) SourceClauses TargetClauses.
    from_term_to_term0 Context (core.enum_elim SourceClauses) (stratified.enum_elim TargetClauses) :-
        map.mapvalues (pfun SourceElem TargetElem =>
            from_term_to_term0 Context SourceElem TargetElem
        ) SourceClauses TargetClauses.

    % Integers
    from_term Context core.int_type (term1 stratified.int_type).
    from_term Context (core.int_intro Int) (term0 (stratified.int_intro Int)).

    % Arrays
    from_term Context (core.array_type SourceType SourceLenElem)
        (term1 (stratified.array_type TargetType TargetLenElem))
    :-
        from_term_to_term1 Context SourceType TargetType,
        from_term_to_term0 Context SourceLenElem TargetLenElem.
    from_term Context (core.array_intro SourceElems) (term0 (stratified.array_intro TargetElems)) :-
        map (pfun SourceElem TargetElem =>
            from_term_to_term0 Context SourceElem TargetElem
        ) SourceElems TargetElems.
    from_term Context (core.array_elim SourceArrayElem SourceIndexElem)
        (term0 (stratified.array_elim TargetArrayElem TargetIndexElem))
    :-
        from_term_to_term0 Context SourceArrayElem TargetArrayElem,
        from_term_to_term0 Context SourceIndexElem TargetIndexElem.

    % Binary format descriptions
    from_term Context core.format_type (term2 stratified.format_type).
    from_term Context core.format_intro_unit (term1 stratified.format_intro_unit).
    from_term Context core.format_intro_u8 (term1 stratified.format_intro_u8).
    from_term Context core.format_intro_u16le (term1 stratified.format_intro_u16le).
    from_term Context core.format_intro_u16be (term1 stratified.format_intro_u16be).
    from_term Context core.format_intro_u32le (term1 stratified.format_intro_u32le).
    from_term Context core.format_intro_u32be (term1 stratified.format_intro_u32be).
    from_term Context core.format_intro_u64le (term1 stratified.format_intro_u64le).
    from_term Context core.format_intro_u64be (term1 stratified.format_intro_u64be).
    from_term Context core.format_intro_s8 (term1 stratified.format_intro_s8).
    from_term Context core.format_intro_s16le (term1 stratified.format_intro_s16le).
    from_term Context core.format_intro_s16be (term1 stratified.format_intro_s16be).
    from_term Context core.format_intro_s32le (term1 stratified.format_intro_s32le).
    from_term Context core.format_intro_s32be (term1 stratified.format_intro_s32be).
    from_term Context core.format_intro_s64le (term1 stratified.format_intro_s64le).
    from_term Context core.format_intro_s64be (term1 stratified.format_intro_s64be).
    from_term Context (core.format_intro_array SourceType SourceLenElem)
        (term1 (stratified.format_intro_array TargetType TargetLenElem))
    :-
        from_term_to_term1 Context SourceType TargetType,
        from_term_to_term0 Context SourceLenElem TargetLenElem.
    from_term Context (core.format_intro_record []) (term1 (stratified.format_intro_record [])).
    from_term Context (core.format_intro_record (( Label, SourceType ) :: SourceTypeFields))
        (term1 (stratified.format_intro_record (( Label, TargetType ) :: TargetTypeFields)))
    :-
        from_term_to_term1 Context SourceType TargetType,
        context.add_binding Context term1 Context',
        from_term_to_term1 Context'
            (core.format_intro_record SourceTypeFields)
            (stratified.format_intro_record TargetTypeFields).
    from_term Context (core.format_intro_compute SourceElem SourceType)
        (term1 (stratified.format_intro_compute TargetElem TargetType))
    :-
        from_term_to_term1 Context SourceType TargetType,
        from_term_to_term0 Context SourceElem TargetElem.
    from_term Context (core.format_intro_absorb SourceType)
        (term1 (stratified.format_intro_absorb TargetType))
    :-
        from_term_to_term1 Context SourceType TargetType.
    from_term Context (core.format_elim SourceType) (term2 (stratified.format_elim TargetType)) :-
        from_term_to_term1 Context SourceType TargetType.


    % Convenience predicates

    from_term_to_term2 : core.term -> stratified.term2 -> prop.
    from_term_to_term2 Source Target :-
        from_term_to_term2 (context []) Source Target.

    from_term_to_term1 : core.term -> stratified.term1 -> prop.
    from_term_to_term1 Source Target :-
        from_term_to_term1 (context []) Source Target.

    from_term_to_term0 : core.term -> stratified.term0 -> prop.
    from_term_to_term0 Source Target :-
        from_term_to_term0 (context []) Source Target.

    from_term : core.term -> term -> prop.
    from_term Source Target :-
        from_term (context []) Source Target.

%end.
