%extend semantics.

    tests : testsuite.
    %testsuite tests.


% FIXME: there seems to be a bug with indenting tests here - see https://github.com/astampoulis/makam/issues/94

>> function_elim (neutral Neutral) InputValue Value ?
>> Yes:
>> Value := neutral (function_elim Neutral InputValue).

>> function_elim (function_intro (closure [] (local 0))) InputValue Value ?
>> Yes:
>> Value := InputValue.


>> function_elim (enum_elim (choice_closure [] [("true", (int_intro 0)), ("false", (int_intro 1))])) (neutral Neutral) Value ?
>> Yes:
>> Value := neutral (enum_elim (choice_closure [] [("true", (int_intro 0)), ("false", (int_intro 1))]) Neutral).

>> function_elim (enum_elim (choice_closure [] [("true", (int_intro 0)), ("false", (int_intro 1))])) (enum_intro "true") Value ?
>> Yes:
>> Value := int_intro 0.

>> function_elim (enum_elim (choice_closure [] [("true", (int_intro 0)), ("false", (int_intro 1))])) (enum_intro "false") Value ?
>> Yes:
>> Value := int_intro 1.


>> pair_elim_first (neutral Neutral) Value ?
>> Yes:
>> Value := neutral (pair_elim_first Neutral).

>> pair_elim_first (pair_intro FirstValue _) Value ?
>> Yes:
>> Value := FirstValue.


>> pair_elim_second (neutral Neutral) Value ?
>> Yes:
>> Value := neutral (pair_elim_second Neutral).

>> pair_elim_second (pair_intro _ SecondValue) Value ?
>> Yes:
>> Value := SecondValue.

>> format_elim (neutral Neutral) Value ?
>> Yes:
>> Value := neutral (format_elim Neutral).

>> format_elim format_intro_u8 Value ?
>> Yes:
>> Value := int_type.



    % Variables

>> normalize [format_intro_u8] (local 0) Term ?
>> Yes:
>> Term := format_intro_u8.


    % Annotated terms

>> normalize (ann format_intro_u8 _) Term ?
>> Yes:
>> Term := format_intro_u8.


    % Functions

>> normalize (function_type type_type (function_type (local 0) (local 1))) Term ?
>> Yes:
>> Term := function_type type_type (function_type (local 0) (local 1)).

>> normalize (function_intro (function_intro (local 0))) Term ?
>> Yes:
>> Term := function_intro (function_intro (local 0)).

>> normalize (function_elim (function_intro (local 0)) (int_intro 1)) Term ?
>> Yes:
>> Term := int_intro 1.

>> normalize [neutral (local 0)] (function_elim (local 0) (int_intro 1)) Term ?
>> Yes:
>> Term := function_elim (local 0) (int_intro 1).


    % Pairs

>> normalize (pair_type int_type (array_type int_type (local 0))) Term ?
>> Yes:
>> Term := pair_type int_type (array_type int_type (local 0)).

>> normalize (pair_elim_first (pair_intro (int_intro 0) (array_intro []))) Term ?
>> Yes:
>> Term := int_intro 0.

>> normalize (pair_elim_first (ann (pair_intro (int_intro 0) (array_intro [])) _)) Term ?
>> Yes:
>> Term := int_intro 0.

>> normalize [neutral (local 0)] (pair_elim_first (local 0)) Term ?
>> Yes:
>> Term := pair_elim_first (local 0).

>> normalize (pair_elim_second (pair_intro (int_intro 0) (array_intro []))) Term ?
>> Yes:
>> Term := array_intro [].

>> normalize (pair_elim_second (ann (pair_intro (int_intro 0) (array_intro [])) _)) Term ?
>> Yes:
>> Term := array_intro [].

>> normalize [neutral (local 0)] (pair_elim_second (local 0)) Term ?
>> Yes:
>> Term := pair_elim_second (local 0).


    % Enumerations

>> normalize (enum_type []) Term ?
>> Yes:
>> Term := enum_type [].

>> normalize (enum_type ["unit"]) Term ?
>> Yes:
>> Term := enum_type ["unit"].

>> normalize (enum_type ["true", "false"]) Term ?
>> Yes:
>> Term := core.enum_type ["true", "false"].

>> normalize (enum_intro "true") Term ?
>> Yes:
>> Term := core.enum_intro "true".

>> normalize [int_intro 0, int_intro 1] (enum_elim [("true", (local 0)), ("false", (local 1))]) Term ?
>> Yes:
>> Term := enum_elim [("true", (int_intro 0)), ("false", (int_intro 1))].

>> normalize (function_elim (enum_elim [("true", (int_intro 0)), ("false", (int_intro 1))]) (enum_intro "true")) Term ?
>> Yes:
>> Term := int_intro 0.

>> normalize (function_elim (enum_elim [("true", (int_intro 0)), ("false", (int_intro 1))]) (enum_intro "false")) Term ?
>> Yes:
>> Term := int_intro 1.

>> normalize [neutral (local 0)] (function_elim (enum_elim [("true", (int_intro 0)), ("false", (int_intro 1))]) (local 0)) Term ?
>> Yes:
>> Term := function_elim (enum_elim [("true", (int_intro 0)), ("false", (int_intro 1))]) (local 0).


    % Integers

>> normalize int_type Term ?
>> Yes:
>> Term := int_type.

>> normalize (int_intro 25) Term ?
>> Yes:
>> Term := int_intro 25.


    % Arrays

>> normalize [int_intro 42, int_type] (array_type (local 1) (local 0)) Term ?
>> Yes:
>> Term := array_type int_type (int_intro 42).

>> normalize (array_intro []) Term ?
>> Yes:
>> Term := array_intro [].

>> normalize [int_intro 25, int_intro 30] (array_intro [local 0, local 1]) Term ?
>> Yes:
>> Term := array_intro [int_intro 25, int_intro 30].

>> normalize [int_intro 1, int_intro 25, int_intro 30] (array_elim (array_intro [local 1, local 2]) (local 0)) Term ?
>> Yes:
>> Term := int_intro 30.

% FIXME:
%  >> normalize [neutral (local 0), int_intro 25, int_intro 30] (array_elim (array_intro [local 1, local 2]) (local 0)) Term ?
%  >> Yes:
%  >> Term := array_elim (array_intro [int_intro 25, int_intro 30]) (local 0).


    % Binary format descriptions

>> normalize (format_elim format_intro_u8) Term ?
>> Yes:
>> Term := int_type.

>> normalize (format_elim (format_intro_array format_intro_u8 (int_intro 3))) Term ?
>> Yes:
>> Term := array_type int_type (int_intro 3).

>> normalize (format_intro_pair format_intro_u16be (format_intro_array format_intro_u8 (local 0))) Term ?
>> Yes:
>> Term := format_intro_pair format_intro_u16be (format_intro_array format_intro_u8 (local 0)).

>> normalize (format_elim (format_intro_array format_intro_u8 (int_intro 3))) Term ?
>> Yes:
>> Term := array_type int_type (int_intro 3).

>> normalize [neutral (local 0)] (format_elim (local 0)) Term ?
>> Yes:
>> Term := format_elim (local 0).

%end.
