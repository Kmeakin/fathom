%extend surface_to_core.

    %open fathom.lang.
    %open fathom.lang.core.semantics.

    tests : testsuite.
    %testsuite tests.


% FIXME: there seems to be a bug with indenting tests here - see https://github.com/astampoulis/makam/issues/94

    % Names

>> is_type (surface.name "Type") Elem ?
>> Yes:
>> Elem := core.type_type.

>> synth_type (surface.name "Type") Type Elem ?
>> Impossible.

>> is_type (surface.name "Format") Elem ?
>> Yes:
>> Elem := core.format_type.

>> synth_type (surface.name "Format") Type Elem ?
>> Impossible.

>> synth_type
    (context [ ( some "Boop", Level, _, format_type ) ])
    (surface.name "Boop")
    Type Elem ?
>> Yes:
>> Type := format_type.
>> Elem := core.local Level.

>> synth_type
    (context [ ( some "Boop", Level, _, format_type ) ])
    (surface.name "Bap")
    Type Elem ?
>> Impossible.

>> synth_type (surface.name "Array") Type Elem ?
>> Yes:
>> Type :=
    function_type type_type
        (closure [] (core.function_type core.int_type core.type_type)).
>> Elem :=
    core.function_intro core.type_type
            (core.function_intro core.int_type
                (core.array_type (core.local 1) (core.local 0))).


    % Annotated terms


    % Functions

    % TODO: Function type tests
    % TODO: Function term tests

>> synth_type
    (surface.function_elim (surface.name "Array")
        [ surface.name "Int"
        , surface.number_intro "23"
        ])
    Type Elem ?
>> Yes:
>> Type := type_type.
>> Elem :=
    core.function_elim
        (core.function_elim
            (core.function_intro core.type_type
                    (core.function_intro core.int_type
                        (core.array_type (core.local 1) (core.local 0))))
            core.int_type)
        (core.int_intro 23).

>> synth_type
    (surface.function_elim (surface.name "FormatArray")
        [ surface.name "U32Be"
        , surface.number_intro "23"
        ])
    Type Elem ?
>> Yes:
>> Type := format_type.
>> Elem :=
    core.function_elim
        (core.function_elim
            (core.function_intro core.format_type
                    (core.function_intro core.int_type
                        (core.format_intro_array (core.local 1) (core.local 0))))
            core.format_intro_u32be)
        (core.int_intro 23).


    % Records

>> check_type (surface.record_type []) type_type Elem ?
>> Yes:
>> Elem := core.record_type [].

>> check_type
    (surface.record_type
        [ ( "data", surface.name "Int" )
        ])
    type_type Elem ?
>> Yes:
>> Elem :=
    core.record_type
        [ ( "data", core.int_type ) ].

>> check_type
    (surface.record_type
        [ ( "data", surface.name "Int" )
        , ( "data", surface.enum_type [] )
        ])
    type_type Elem ?
>> Impossible.

>> check_type
    (surface.record_type
        [ ( "x", surface.name "Int" )
        , ( "y", surface.name "Int" )
        ])
    type_type Elem ?
>> Yes:
>> Elem :=
    core.record_type
        [ ( "x", core.int_type )
        , ( "y", core.int_type )
        ].

>> check_type
    (surface.record_type
        [ ( "len", surface.name "Int" )
        , ( "data",
            surface.function_elim (surface.name "Array")
                [ surface.enum_type [ "unit" ]
                , surface.name "len"
                ]
          )
        ])
    type_type Elem ?
>> Yes:
>> Elem :=
    core.record_type
        [ ( "len", core.int_type )
        , ( "data",
            core.function_elim
                (core.function_elim
                    (core.function_intro core.type_type
                            (core.function_intro core.int_type
                                (core.array_type (core.local 1) (core.local 0))))
                    (core.enum_type [ "unit" ]))
                (core.local 0)
          )
        ].

>> check_type (surface.record_type []) format_type Elem ?
>> Yes:
>> Elem := core.format_intro_record [].

>> check_type
    (surface.record_type
        [ ( "data", surface.name "U32Be" )
        ])
    format_type Elem ?
>> Yes:
>> Elem :=
    core.format_intro_record
        [ ( "data", core.format_intro_u32be )
        ].

>> check_type
    (surface.record_type
        [ ( "data", surface.name "U32Be" )
        , ( "data", surface.name "U16Be" )
        ])
    format_type Elem ?
>> Impossible.

>> check_type
    (surface.record_type
        [ ( "x", surface.name "U32Le" )
        , ( "y", surface.name "U32Le" )
        ])
    format_type Elem ?
>> Yes:
>> Elem :=
    core.format_intro_record
        [ ( "x", core.format_intro_u32le )
        , ( "y", core.format_intro_u32le )
        ].

>> check_type
    (surface.record_type
        [ ( "len", surface.name "U16Be" )
        , ( "data",
            surface.function_elim (surface.name "FormatArray")
                [ surface.name "U32Be"
                , surface.name "len"
                ]
          )
        ])
    format_type Elem ?
>> Yes:
>> Elem :=
    core.format_intro_record
        [ ( "len", core.format_intro_u16be )
        , ( "data",
            core.function_elim
                (core.function_elim
                    (core.function_intro core.format_type
                            (core.function_intro core.int_type
                                (core.format_intro_array (core.local 1) (core.local 0))))
                    core.format_intro_u32be)
                (core.local 0)
          )
        ].

>> synth_type (surface.record_intro []) Type Elem ?
>> Yes:
>> Type := record_type (field_closure [] []).
>> Elem := core.record_intro [] [].

>> check_type
    (surface.record_intro
        [ ( "y", surface.number_intro "2" )
        , ( "x", surface.number_intro "1" )
        ])
    (record_type
        (field_closure []
            [ ( "x", core.int_type )
            , ( "y", core.int_type )
            ]))
    Elem ?
>> Yes:
>> Elem :=
    core.record_intro
        [ ( "x", core.int_intro 1 )
        , ( "y", core.int_intro 2 )
        ]
        [ ( "x", core.int_type )
        , ( "y", core.int_type )
        ].

    % TODO: Dependent record introduction tests
    % TODO: Record elimination tests


    % Enumerations


    % Literals

>> check_type (surface.number_intro "23") int_type Elem ?
>> Yes:
>> Elem := core.int_intro 23.


%end.
