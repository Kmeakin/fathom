use lalrpop_util::ParseError;

use ast::{BoolExpr, Definition, Field, Expr, Type};
use env::Env;
use parser::lexer::{Token, Error as LexerError, ErrorCode as LexerErrorCode};
use source::BytePos;

grammar<'input, 'env>(env: &'env Env);

extern {
    type Location = BytePos;
    type Error = LexerError;

    enum Token<'input> {
        // Data
        "Ident" => Token::Ident(<&'input str>),
        "BinLiteral" => Token::BinLiteral(<u64>),
        "HexLiteral" => Token::HexLiteral(<u64>),
        "DecLiteral" => Token::DecLiteral(<u64>),

        // Keywords
        "struct" => Token::Struct,
        "union" => Token::Union,
        "where" => Token::Where,

        // Symbols
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equal,
        "=>" => Token::EqualGreater,
        "/" => Token::ForwardSlash,
        "-" => Token::Minus,
        "|" => Token::Pipe,
        "+" => Token::Plus,
        ";" => Token::Semi,
        "*" => Token::Star,

        // Delimeters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
    }
}

pub Definitions: Vec<Definition> = {
    Definition*,
};

Definition: Definition = {
    <lo: @L> <name: "Ident"> "=" <ty: Type> ";" <hi: @R> => {
        Definition::new((lo, hi), name, ty)
    },
};

AtomicType: Type = {
    <lo: @L> <name: "Ident"> <hi: @R> => {
        match env.lookup_ty(&name) {
            Some(ty) => ty.clone(),
            None => Type::var((lo, hi), name),
        }
    },
    "(" <Type> ")",
    <lo: @L> "struct" "{" <fields: (<Field> ",")*> <last: Field?> "}" <hi: @R> => {
        let mut fields = fields;
        fields.extend(last);
        Type::struct_((lo, hi), fields)
    },
    <lo: @L> "union" "{" <tys: (<Type> ",")+> <last: Type?> "}" <hi: @R> => {
        let mut tys = tys;
        tys.extend(last);
        Type::union((lo, hi), tys)
    },
    <lo: @L> "[" <elem: Type> ";" <size: Expr> "]" <hi: @R> => {
        Type::array((lo, hi), elem, size)
    },
};

pub Type: Type = {
    AtomicType,
    <lo: @L> <ty: Type> "where" <param: "Ident"> "=>" <pred: BoolExpr> <hi: @R> => {
        Type::where_((lo, hi), ty, param, pred)
    },
};

BoolExpr: BoolExpr = {
    <lo: @L> <name: "Ident"> <hi: @R> =>? {
        match name {
            "true" => Ok(BoolExpr::const_((lo, hi), true)),
            "false" => Ok(BoolExpr::const_((lo, hi), false)),
            _ => Err(ParseError::User {
                error: LexerError {
                    location: lo,
                    code: LexerErrorCode::UnexpectedCharacter,
                },
            })
        }
    },
};

pub Expr = AddExpr;

AddExpr : Expr = {
    MulExpr,
    <lo: @L> <lhs: MulExpr> "+" <rhs: MulExpr> <hi: @R> => {
        Expr::add((lo, hi), lhs, rhs)
    },
    <lo: @L> <lhs: MulExpr> "-" <rhs: MulExpr> <hi: @R> => {
        Expr::sub((lo, hi), lhs, rhs)
    },
};

MulExpr : Expr = {
    AtomicExpr,
    <lo: @L> <lhs: AtomicExpr> "*" <rhs: AtomicExpr> <hi: @R> => {
        Expr::mul((lo, hi), lhs, rhs)
    },
    <lo: @L> <lhs: AtomicExpr> "/" <rhs: AtomicExpr> <hi: @R> => {
        Expr::div((lo, hi), lhs, rhs)
    },
};

AtomicExpr : Expr = {
    "(" <expr: Expr> ")" => expr,
    <lo: @L> <value: "BinLiteral"> <hi: @R> => {
        Expr::const_((lo, hi), value)
    },
    <lo: @L> <value: "HexLiteral"> <hi: @R> => {
        Expr::const_((lo, hi), value)
    },
    <lo: @L> <value: "DecLiteral"> <hi: @R> => {
        Expr::const_((lo, hi), value)
    },
    <lo: @L> <name: "Ident"> <hi: @R> => {
        Expr::var((lo, hi), name)
    },
    <lo: @L> "-" <expr: AtomicExpr> <hi: @R> => {
        Expr::neg((lo, hi), expr)
    },
};

Field: Field = {
    <lo: @L> <name: "Ident"> ":" <ty: Type> <hi: @R> => {
        Field::new((lo, hi), name, ty)
    },
};
