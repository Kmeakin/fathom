use ast::{Field};
use ast::binary::{Definition, Type, Definition, SpannedType};
use ast::host::{Binop, SpannedExpr, Unop};
use parser::lexer::{Token, Error as LexerError};
use source::BytePos;

grammar<'input>();

extern {
    type Location = BytePos;
    type Error = LexerError;

    enum Token<'input> {
        // Data
        "Ident" => Token::Ident(<&'input str>),
        "BinLiteral" => Token::BinLiteral(<i64>),
        "HexLiteral" => Token::HexLiteral(<i64>),
        "DecLiteral" => Token::DecLiteral(<i64>),

        // Keywords
        "struct" => Token::Struct,
        "union" => Token::Union,
        "where" => Token::Where,

        // Symbols
        "&" => Token::Ampersand,
        "!" => Token::Bang,
        "!=" => Token::BangEqual,
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equal,
        "==" => Token::EqualEqual,
        "=>" => Token::EqualGreater,
        "/" => Token::ForwardSlash,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        "-" => Token::Minus,
        "|" => Token::Pipe,
        "+" => Token::Plus,
        ";" => Token::Semi,
        "*" => Token::Star,

        // Delimeters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
    }
}

S<T>: Spanned<T> = {
    <lo: @L> <x: T> <hi: @R> => {
        Spanned::new((lo, hi), x)
    },
};

pub Definitions: Vec<SpannedDefinition<String>> = {
    S<Definition>*,
};

Definition: Definition<String> = {
    <name: "Ident"> "=" <ty: S<Type>> ";" => {
        Definition::new(name, ty)
    },
};

AtomicType: Type<String> = {
    <name: "Ident"> => {
        Type::fvar(name)
    },
    "(" <Type> ")",
    "struct" "{" <fields: (<Field> ",")*> <last: Field?> "}" => {
        Type::struct_(fields.into_iter().chain(last))
    },
    "union" "{" <tys: (<S<Type>> ",")+> <last: S<Type>?> "}" => {
        let mut tys = tys;
        tys.extend(last);
        Type::union(tys)
    },
    "[" <elem: S<Type>> ";" <size: S<Expr>> "]" => {
        Type::array(elem, size)
    },
};

pub Type: Type<String> = {
    AtomicType,
    <ty: S<Type>> "where" <param: S<"Ident">> "=>" <pred: S<Expr>> => {
        Type::cond(ty, param, pred)
    },
};

// Use precedence climbing to define the operators
// https://en.wikipedia.org/wiki/Operator-precedence_parser#Precedence_climbing_method

pub Expr: Expr<String> = {
    EqExpr,
    <lhs: S<EqExpr>> "|" <rhs: S<Expr>> => {
        Expr::binop(Binop::Or, lhs, rhs)
    },
    <lhs: S<EqExpr>> "&" <rhs: S<Expr>> => {
        Expr::binop(Binop::And, lhs, rhs)
    },
};

EqExpr: Expr<String> = {
    CmpExpr,
    <lhs: S<CmpExpr>> "==" <rhs: S<EqExpr>> => {
        Expr::binop(Binop::Eq, lhs, rhs)
    },
    <lhs: S<CmpExpr>> "!=" <rhs: S<EqExpr>> => {
        Expr::binop(Binop::Ne, lhs, rhs)
    },
};

CmpExpr: Expr<String> = {
    AddExpr,
    <lhs: S<AddExpr>> "<=" <rhs: S<CmpExpr>> => {
        Expr::binop(Binop::Le, lhs, rhs)
    },
    <lhs: S<AddExpr>> "<" <rhs: S<CmpExpr>> => {
        Expr::binop(Binop::Lt, lhs, rhs)
    },
    <lhs: S<AddExpr>> ">" <rhs: S<CmpExpr>> => {
        Expr::binop(Binop::Gt, lhs, rhs)
    },
    <lhs: S<AddExpr>> ">=" <rhs: S<CmpExpr>> => {
        Expr::binop(Binop::Ge, lhs, rhs)
    },
};

AddExpr: Expr<String> = {
    MulExpr,
    <lhs: S<MulExpr>> "+" <rhs: S<AddExpr>> => {
        Expr::binop(Binop::Add, lhs, rhs)
    },
    <lhs: S<MulExpr>> "-" <rhs: S<AddExpr>> => {
        Expr::binop(Binop::Sub, lhs, rhs)
    },
};

MulExpr: Expr<String> = {
    AtomicExpr,
    <lhs: S<AtomicExpr>> "*" <rhs: S<MulExpr>> => {
        Expr::binop(Binop::Mul, lhs, rhs)
    },
    <lhs: S<AtomicExpr>> "/" <rhs: S<MulExpr>> => {
        Expr::binop(Binop::Div, lhs, rhs)
    },
};

AtomicExpr: Expr<String> = {
    "(" <expr: Expr> ")" => expr,
    <value: "BinLiteral"> => {
        Expr::int(value)
    },
    <value: "HexLiteral"> => {
        Expr::int(value)
    },
    <value: "DecLiteral"> => {
        Expr::int(value)
    },
    <name: "Ident"> => {
        Expr::fvar(name)
    },
    "-" <expr: S<AtomicExpr>> => {
        Expr::unop(Unop::Neg, expr)
    },
    "!" <value: S<AtomicExpr>> => {
        Expr::unop(Unop::Not, value)
    },
};

Field: Field<String, Type<String>> = {
    <name: S<"Ident">> ":" <ty: S<Type>> => {
        Field::new(name, ty)
    },
};
