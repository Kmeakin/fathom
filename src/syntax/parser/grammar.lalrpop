use lalrpop_util::ParseError;
use source::{BytePos, Span};
use syntax::parser::ast::{binary, host, Definition, Field, Program};
use syntax::parser::ast::host::{Binop, Const, Unop};
use syntax::parser::GrammarError;
use syntax::parser::lexer::Token;


grammar<'src>();


// Tokens

extern {
    type Location = BytePos;
    type Error = GrammarError;

    enum Token<'src> {
        // Data
        "Ident" => Token::Ident(<&'src str>),
        "DocComment" => Token::DocComment(<&'src str>),
        "BinLiteral" => Token::BinLiteral(<u64>, <&'src str>),
        "HexLiteral" => Token::HexLiteral(<u64>, <&'src str>),
        "DecLiteral" => Token::DecLiteral(<u64>, <&'src str>),
        "FloatDecLiteral" => Token::FloatDecLiteral(<f64>, <&'src str>),

        // Keywords
        "as" => Token::As,
        "cond" => Token::Cond,
        "compute" => Token::Compute,
        "from" => Token::From,
        "struct" => Token::Struct,
        "union" => Token::Union,
        "where" => Token::Where,

        // Symbols
        "&" => Token::Amp,
        "&&" => Token::AmpAmp,
        "!" => Token::Bang,
        "!=" => Token::BangEqual,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        "=" => Token::Equal,
        "==" => Token::EqualEqual,
        "=>" => Token::EqualGreater,
        "/" => Token::ForwardSlash,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        "-" => Token::Minus,
        "|" => Token::Pipe,
        "||" => Token::PipePipe,
        "+" => Token::Plus,
        ";" => Token::Semi,
        "*" => Token::Star,

        // Delimeters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
    }
}


pub Program: Program<'src> = {
    Definition* => Program { definitions: <> }
};

pub Definition: Definition<'src> = {
    <doc: "DocComment"*> <name: "Ident"> "=" <ty: PrimaryBinaryType> ";" => {
        Definition { doc, name, ty }
    },
    <doc: "DocComment"*> <name: "Ident"> <lo: @L>
        "(" <params: (<"Ident"> ",")*> <last: "Ident"> ")" "="
        <body_ty: PrimaryBinaryType> <hi: @R> ";" =>
    {
        let mut params = params;
        params.push(last);

        let ty = binary::Type::Lam(Span::new(lo, hi), params, Box::new(body_ty));

        Definition { doc, name, ty }
    },
};

Field<Value>: Field<'src, Value> = {
    <doc: "DocComment"*> <name: "Ident"> ":" <value: Value> => {
        Field { doc, name, value }
    },
};


// Binary Types

pub BinaryType: binary::Type<'src> = {
    <ty: PrimaryBinaryType> => ty,
};

PrimaryBinaryType: binary::Type<'src> = {
    AtomicBinaryType,
    <lo1: @L> <ty: PrimaryBinaryType> "where" <lo2: @L> <param: "Ident"> "=>" <pred: PrimaryHostExpr> <hi: @R> => {
        binary::Type::Where(Span::new(lo1, hi), Box::new(ty), lo2, param, Box::new(pred))
    },
    <lo: @L> "compute" <repr_ty: HostType> "from" <expr: PrimaryHostExpr> <hi: @R> => {
        binary::Type::Compute(Span::new(lo, hi), repr_ty, Box::new(expr))
    },
};

AtomicBinaryType: binary::Type<'src> = {
    <lo: @L> <name: "Ident"> <hi: @R> => {
        binary::Type::Var(Span::new(lo, hi), name)
    },
    <lo: @L> <ty: AtomicBinaryType> "(" <arg_tys: (<BinaryType> ",")*> <last: BinaryType> ")" <hi: @R> => {
        let mut arg_tys = arg_tys;
        arg_tys.push(last);
        binary::Type::App(Span::new(lo, hi), Box::new(ty), arg_tys)
    },
    "(" <ty: PrimaryBinaryType> ")" => ty,
    <lo: @L> "struct" "{"
        <fields: (<Field<BinaryType>> ",")*>
        <last: Field<BinaryType>?>
    "}" <hi: @R> =>
    {
        let mut fields = fields;
        fields.extend(last);
        binary::Type::Struct(Span::new(lo, hi), fields)
    },
    <lo: @L> "cond" "{"
        <options: (<Field<(<HostExpr> "=>" <BinaryType>)>> ",")*>
        <last: Field<(<HostExpr> "=>" <BinaryType>)>?>
    "}" <hi: @R> =>
    {
        let mut options = options;
        options.extend(last);
        binary::Type::Cond(Span::new(lo, hi), options)
    },
    <lo: @L> "[" <elem: PrimaryBinaryType> ";" <size: PrimaryHostExpr> "]" <hi: @R> => {
        binary::Type::Array(Span::new(lo, hi), Box::new(elem), Box::new(size))
    },
};


// Host Types

HostType: host::TypeConst = {
    // FIXME: implement full host type parsing, with proper name binding
    //
    // We'll just hard-code identifiers for now
    <name: "Ident"> =>? {
        use syntax::ast::host::{FloatType, SignedType, TypeConst, UnsignedType};

        match name {
            "unit" => Ok(TypeConst::Unit),
            "bottom" => Ok(TypeConst::Bottom),
            "bool" => Ok(TypeConst::Bool),
            "f32" => Ok(TypeConst::Float(FloatType::F32)),
            "f64" => Ok(TypeConst::Float(FloatType::F64)),
            "i8" => Ok(TypeConst::Signed(SignedType::I8)),
            "i16" => Ok(TypeConst::Signed(SignedType::I16)),
            "i24" => Ok(TypeConst::Signed(SignedType::I24)),
            "i32" => Ok(TypeConst::Signed(SignedType::I32)),
            "i64" => Ok(TypeConst::Signed(SignedType::I64)),
            "u8" => Ok(TypeConst::Unsigned(UnsignedType::U8)),
            "u16" => Ok(TypeConst::Unsigned(UnsignedType::U16)),
            "u24" => Ok(TypeConst::Unsigned(UnsignedType::U24)),
            "u32" => Ok(TypeConst::Unsigned(UnsignedType::U32)),
            "u64" => Ok(TypeConst::Unsigned(UnsignedType::U64)),
            name => Err(ParseError::User {
                error: GrammarError::InvalidHostTypeName { name: name.to_owned() },
            }),
        }
    },
};


// Host Expressions

pub HostExpr: host::Expr<'src> = {
    <expr: PrimaryHostExpr> => expr,
};

// Unary operators

UnopNeg: Unop = "-" => Unop::Neg;
UnopNot: Unop = "!" => Unop::Not;

UnopExpr<Op, Operand>: host::Expr<'src> = {
    <lo: @L> <op: Op> <expr: Operand> <hi: @R> => {
        host::Expr::Unop(Span::new(lo, hi), op, Box::new(expr))
    },
};

// Binary operators

BinopOr:   Binop = "||"  => Binop::Or;
BinopAnd:  Binop = "&&"  => Binop::And;
BinopEq:   Binop = "=="  => Binop::Eq;
BinopNe:   Binop = "!="  => Binop::Ne;
BinopLe:   Binop = "<="  => Binop::Le;
BinopLt:   Binop = "<"   => Binop::Lt;
BinopGt:   Binop = ">"   => Binop::Gt;
BinopGe:   Binop = ">="  => Binop::Ge;
BinopAdd:  Binop = "+"   => Binop::Add;
BinopSub:  Binop = "-"   => Binop::Sub;
BinopMul:  Binop = "*"   => Binop::Mul;
BinopDiv:  Binop = "/"   => Binop::Div;

BinopExpr<Lhs, Op, Rhs>: host::Expr<'src> = {
    <lo: @L> <lhs: Lhs> <op: Op> <rhs: Rhs> <hi: @R> => {
        host::Expr::Binop(Span::new(lo, hi), op, Box::new(lhs), Box::new(rhs))
    },
};

// Use precedence climbing to define the operators
// https://en.wikipedia.org/wiki/Operator-precedence_parser#Precedence_climbing_method

PrimaryHostExpr: host::Expr<'src> = {
    EqHostExpr,
    BinopExpr<EqHostExpr, BinopOr, PrimaryHostExpr>,
    BinopExpr<EqHostExpr, BinopAnd, PrimaryHostExpr>,
};

EqHostExpr: host::Expr<'src> = {
    CmpHostExpr,
    BinopExpr<CmpHostExpr, BinopEq, EqHostExpr>,
    BinopExpr<CmpHostExpr, BinopNe, EqHostExpr>,
};

CmpHostExpr: host::Expr<'src> = {
    AddHostExpr,
    BinopExpr<AddHostExpr, BinopLe, CmpHostExpr>,
    BinopExpr<AddHostExpr, BinopLt, CmpHostExpr>,
    BinopExpr<AddHostExpr, BinopGt, CmpHostExpr>,
    BinopExpr<AddHostExpr, BinopGe, CmpHostExpr>,
};

AddHostExpr: host::Expr<'src> = {
    MulHostExpr,
    BinopExpr<MulHostExpr, BinopAdd, AddHostExpr>,
    BinopExpr<MulHostExpr, BinopSub, AddHostExpr>,
};

MulHostExpr: host::Expr<'src> = {
    CastHostExpr,
    BinopExpr<CastHostExpr, BinopMul, MulHostExpr>,
    BinopExpr<CastHostExpr, BinopDiv, MulHostExpr>,
};

CastHostExpr: host::Expr<'src> = {
    PrefixHostExpr,
    <lo: @L> <expr: CastHostExpr> "as" <ty: HostType> <hi: @R> => {
        host::Expr::Cast(Span::new(lo, hi), Box::new(expr), ty)
    },
};

PrefixHostExpr: host::Expr<'src> = {
    AtomicHostExpr,
    UnopExpr<UnopNeg, AtomicHostExpr>,
    UnopExpr<UnopNot, AtomicHostExpr>,
};

IntLiteral<Value>: host::Expr<'src> = {
    <lo: @L> <value: Value> <hi: @R> =>? {
        use syntax::ast::host::{SignedType, UnsignedType};
        use syntax::ast::host::IntSuffix::{Signed, Unsigned};

        let float = Const::Int(value.0, match value.1 {
            "i8" => Signed(SignedType::I8),
            "i16" => Signed(SignedType::I16),
            "i24" => Signed(SignedType::I24),
            "i32" => Signed(SignedType::I32),
            "i64" => Signed(SignedType::I64),
            "u8" => Unsigned(UnsignedType::U8),
            "u16" => Unsigned(UnsignedType::U16),
            "u24" => Unsigned(UnsignedType::U24),
            "u32" => Unsigned(UnsignedType::U32),
            "u64" => Unsigned(UnsignedType::U64),
            "" => return Err(ParseError::User { error: GrammarError::ConstSuffixMissing }),
            suffix => return Err(ParseError::User {
                error: GrammarError::ConstSuffixInvalid { suffix: suffix.to_owned() },
            }),
        });

        Ok(host::Expr::Const(Span::new(lo, hi), float))
    },
};

FloatLiteral<Value>: host::Expr<'src> = {
    <lo: @L> <value: Value> <hi: @R> =>? {
        use syntax::ast::host::FloatType;

        let float = Const::Float(value.0, match value.1 {
            "f32" => FloatType::F32,
            "f64" => FloatType::F64,
            "" => return Err(ParseError::User { error: GrammarError::ConstSuffixMissing }),
            suffix => return Err(ParseError::User {
                error: GrammarError::ConstSuffixInvalid { suffix: suffix.to_owned() },
            }),
        });

        Ok(host::Expr::Const(Span::new(lo, hi), float))
    },
};

AtomicHostExpr: host::Expr<'src> = {
    "(" <expr: PrimaryHostExpr> ")" => expr,

    IntLiteral<"BinLiteral">,
    IntLiteral<"HexLiteral">,
    IntLiteral<"DecLiteral">,
    FloatLiteral<"FloatDecLiteral">,

    <lo: @L> <name: "Ident"> <hi: @R> => {
        host::Expr::Var(Span::new(lo, hi), name)
    },
    <lo: @L> <struct_expr: AtomicHostExpr> "." <field_name: "Ident"> <hi: @R> => {
        host::Expr::Proj(Span::new(lo, hi), Box::new(struct_expr), field_name)
    },
    <lo: @L> <array_expr: AtomicHostExpr> "[" <index_expr: PrimaryHostExpr> "]" <hi: @R> => {
        host::Expr::Subscript(Span::new(lo, hi), Box::new(array_expr), Box::new(index_expr))
    },
};
