stdout = '''
let reserved : _ = fun format => fun default => format;
let deprecated : _ = fun format => fun default => format;
let fixed : Format = u32be;
let fword : Format = s16be;
let ufword : Format = u16be;
let f2dot14 : Format = s16be;
let u24be : Format = array8 3 u8;
let long_date_time : Format = s64be;
let tag : Format = u32be;
let unknown_table : Format = {};
let empty : Format = {};
let offset16 : _ = fun base => fun format => {
    offset <- u16be,
    link <- match offset {
        0 => empty,
        _ => link (pos_add_u16 base offset) format,
    },
};
let offset32 : _ = fun base => fun format => {
    offset <- u32be,
    link <- match offset {
        0 => empty,
        _ => link (pos_add_u32 base offset) format,
    },
};
let version16dot16 : _ = u32be;
let platform_id : _ = u16be;
let encoding_id : _ = fun platform => u16be;
let language_id : _ = u16be;
let language_id32 : _ = u32be;
let class_def_format_1 : _ = {
    start_glyph_id <- u16be,
    glyph_count <- u16be,
    class_value_array <- array16 glyph_count u16be,
};
let class_def_format_2 : _ = let class_range_record : _ = {
    start_glyph_id <- u16be,
    end_glyph_id <- u16be,
    class <- u16be,
};
{
    class_range_count <- u16be,
    class_range_records <- array16 class_range_count class_range_record,
};
let class_def : _ = {
    class_format <- u16be,
    data <- match class_format {
        1 => class_def_format_1,
        2 => class_def_format_2,
        _ => unknown_table,
    },
};
let coverage_format_1 : _ = {
    glyph_count <- u16be,
    glyph_array <- array16 glyph_count u16be,
};
let coverage_format_2 : _ = let range_record : _ = {
    start_glyph_id <- u16be,
    end_glyph_id <- u16be,
    start_coverage_index <- u16be,
};
{ range_count <- u16be, range_records <- array16 range_count range_record };
let coverage_table : _ = {
    coverage_format <- u16be,
    data <- match coverage_format {
        1 => coverage_format_1,
        2 => coverage_format_2,
        _ => unknown_table,
    },
};
let device_table : _ = let u16_div_ceil : _ =
fun numerator => fun denominator => let quotient : _ numerator denominator =
u16_div numerator denominator;
match (u16_lt (u16_mul quotient denominator) numerator) {
    false => quotient,
    true => u16_add quotient 1,
};
let delta_bits : _ = fun delta_format => fun num_sizes => match delta_format {
    0x1 => u16_mul num_sizes 2,
    0x2 => u16_mul num_sizes 4,
    0x3 => u16_mul num_sizes 8,
    _ => 0,
};
let num_sizes : _ = fun start => fun end => u16_add (u16_sub end start) 1;
{
    start_size <- u16be,
    end_size <- u16be,
    delta_format <- u16be,
    delta_values <- let delta_bits : _ start_size end_size delta_format =
    delta_bits delta_format (num_sizes start_size end_size);
    array16 (u16_div_ceil delta_bits 16) u16be,
};
let variation_index_table : _ = {
    delta_set_outer_index <- u16be,
    delta_set_inner_index <- u16be,
};
let device_or_variation_index_table : _ = overlap {
    init <- { _skipped <- array8 4 u8, table_format <- u16be },
    table <- match init.table_format {
        0x1 => device_table,
        0x2 => device_table,
        0x3 => device_table,
        0x8000 => variation_index_table,
        _ => unknown_table,
    },
};
let cmap_language_id : _ = fun platform => language_id;
let cmap_language_id32 : _ = fun platform => language_id32;
let small_glyph_id : _ = u8;
let sequential_map_group : _ = {
    start_char_code <- u32be,
    end_char_code <- u32be,
    start_glyph_id <- u32be,
};
let constant_map_group : _ = sequential_map_group;
let unicode_range : _ = {
    start_unicode_value <- u24be,
    additional_count <- u8,
};
let default_uvs_table : _ = {
    num_unicode_value_ranges <- u32be,
    ranges <- array32 num_unicode_value_ranges unicode_range,
};
let uvs_mapping : _ = { unicode_value <- u24be, glyph_id <- u16be };
let non_default_uvs_table : _ = {
    num_uvs_mappings <- u32be,
    uvs_mappings <- array32 num_uvs_mappings uvs_mapping,
};
let variation_selector : _ = fun table_start => {
    var_selector <- u24be,
    default_uvs_offset <- offset32 table_start default_uvs_table,
    non_default_uvs_offset <- offset32 table_start non_default_uvs_table,
};
let cmap_subtable_format0 : _ = fun platform => {
    length <- u16be,
    language <- cmap_language_id platform,
    glyph_id_array <- array16 256 small_glyph_id,
};
let cmap_subtable_format2 : _ = fun platform => {
    length <- u16be,
    language <- cmap_language_id platform,
    sub_header_keys <- array16 256 u16be,
};
let cmap_subtable_format4 : _ = fun platform => {
    length <- u16be,
    language <- cmap_language_id platform,
    seg_count_x2 <- u16be,
    seg_count <- succeed (_ platform length language seg_count_x2) (u16_div seg_count_x2 2),
    search_range <- u16be,
    entry_selector <- u16be,
    range_shift <- u16be,
    end_code <- array16 seg_count u16be,
    _reserved_pad <- reserved s16be 0,
    start_code <- array16 seg_count u16be,
    id_delta <- array16 seg_count s16be,
    id_range_offsets <- array16 seg_count u16be,
};
let cmap_subtable_format6 : _ = fun platform => {
    length <- u16be,
    language <- cmap_language_id platform,
    first_code <- u16be,
    entry_count <- u16be,
    glyph_id_array <- array16 entry_count u16be,
};
let cmap_subtable_format8 : _ = fun platform => {
    _reserved <- reserved u16be 0,
    length <- u32be,
    language <- cmap_language_id32 platform,
    is32 <- array16 8192 u8,
    num_groups <- u32be,
    groups <- array32 num_groups sequential_map_group,
};
let cmap_subtable_format10 : _ = fun platform => {
    _reserved <- reserved u16be 0,
    length <- u32be,
    language <- cmap_language_id32 platform,
    start_char_code <- u32be,
    num_chars <- u32be,
    glyph_id_array <- array32 num_chars u16be,
};
let cmap_subtable_format12 : _ = fun platform => {
    _reserved <- reserved u16be 0,
    length <- u32be,
    language <- cmap_language_id32 platform,
    num_groups <- u32be,
    groups <- array32 num_groups sequential_map_group,
};
let cmap_subtable_format13 : _ = fun platform => {
    _reserved <- reserved u16be 0,
    length <- u32be,
    language <- cmap_language_id32 platform,
    num_groups <- u32be,
    groups <- array32 num_groups constant_map_group,
};
let cmap_subtable_format14 : _ = fun platform => fun table_start => {
    length <- u32be,
    num_var_selector_records <- u32be,
    var_selector <- array32 num_var_selector_records (variation_selector table_start),
};
let cmap_subtable : _ = fun platform => {
    table_start <- stream_pos,
    format <- u16be,
    data <- match format {
        0 => cmap_subtable_format0 platform,
        2 => cmap_subtable_format2 platform,
        4 => cmap_subtable_format4 platform,
        6 => cmap_subtable_format6 platform,
        8 => cmap_subtable_format8 platform,
        10 => cmap_subtable_format10 platform,
        12 => cmap_subtable_format12 platform,
        13 => cmap_subtable_format13 platform,
        14 => cmap_subtable_format14 platform table_start,
        _ => unknown_table,
    },
};
let encoding_record : _ = fun table_start => {
    platform <- platform_id,
    encoding <- encoding_id platform,
    subtable_offset <- offset32 table_start (cmap_subtable platform),
};
let cmap_table : _ = {
    table_start <- stream_pos,
    version <- u16be,
    num_tables <- u16be,
    encoding_records <- array16 num_tables (encoding_record table_start),
};
let head_table : _ = {
    major_version <- u16be when u16_eq major_version 1,
    minor_version <- u16be,
    font_revision <- fixed,
    checksum_adjustment <- u32be,
    magic_number <- u32be when u32_eq magic_number 0x5f0f3cf5,
    flags <- u16be,
    units_per_em <- u16be when bool_and (u16_gte units_per_em 16) (u16_lte units_per_em 16384),
    created <- long_date_time,
    modified <- long_date_time,
    glyph_extents <- {
        x_min <- s16be,
        y_min <- s16be,
        x_max <- s16be,
        y_max <- s16be,
    },
    mac_style <- u16be,
    lowest_rec_ppem <- u16be,
    font_direction_hint <- deprecated s16be 2,
    index_to_loc_format <- s16be,
    glyph_data_format <- s16be,
};
let hhea_table : _ = {
    major_version <- u16be when u16_eq major_version 1,
    minor_version <- u16be,
    ascent <- fword,
    descent <- fword,
    line_gap <- fword,
    advance_width_max <- ufword,
    min_left_side_bearing <- fword,
    min_right_side_bearing <- fword,
    x_max_extent <- fword,
    caret_slope <- { rise <- s16be, run <- s16be },
    caret_offset <- s16be,
    _reserved0 <- reserved s16be 0,
    _reserved1 <- reserved s16be 0,
    _reserved2 <- reserved s16be 0,
    _reserved3 <- reserved s16be 0,
    metric_data_format <- s16be,
    number_of_long_horizontal_metrics <- u16be,
};
let long_horizontal_metric : _ = {
    advance_width <- u16be,
    left_side_bearing <- s16be,
};
let htmx_table : _ =
fun number_of_long_horizontal_metrics => fun num_glyphs => {
    h_metrics <- array16 number_of_long_horizontal_metrics long_horizontal_metric,
};
let maxp_table : _ = { version <- version16dot16, num_glyphs <- u16be };
let name_record : _ = fun storage_start => {
    platform <- platform_id,
    encoding <- encoding_id platform,
    language <- language_id,
    name_id <- u16be,
    length <- u16be,
    offset <- offset16 storage_start (array16 length u8),
};
let lang_tag_record : _ = fun storage_start => {
    length <- u16be,
    offset <- offset16 storage_start (array16 length u8),
};
let name_table : _ = {
    table_start <- stream_pos,
    version <- u16be,
    name_count <- u16be,
    storage_offset <- u16be,
    name_records <- array16 name_count (name_record (pos_add_u16 table_start storage_offset)),
};
let loca_table : _ = fun num_glyphs => fun index_to_loc_format => {
    offsets <- match index_to_loc_format {
        0 => array16 (u16_add num_glyphs 1) u16be,
        1 => array16 (u16_add num_glyphs 1) u32be,
        _ => unknown_table,
    },
};
let glyph_header : _ = {
    number_of_contours <- s16be,
    x_min <- s16be,
    y_min <- s16be,
    x_max <- s16be,
    y_max <- s16be,
};
let simple_glyph : _ = fun number_of_contours => {
    end_pts_of_contours <- array16 number_of_contours u16be,
    instruction_length <- u16be,
    instructions <- array16 instruction_length u8,
};
let args_are_signed : _ = fun flags => u16_neq (u16_and flags 0x2) 0;
let arg_format : _ = fun flags => match (u16_neq (u16_and flags 0x1) 0) {
    false => match (args_are_signed flags) { false => u8, true => s8 },
    true => match (args_are_signed flags) { false => u16be, true => s16be },
};
let composite_glyph : _ = {
    flags <- u16be,
    glyphIndex <- u16be,
    argument1 <- arg_format flags,
    argument2 <- arg_format flags,
};
let glyph : _ = {
    header <- glyph_header,
    data <- match (s16_lt header.number_of_contours 0) {
        false => simple_glyph (s16_unsigned_abs header.number_of_contours),
        true => composite_glyph,
    },
};
let glyf_table : _ = fun num_glyphs => { glyphs <- array16 num_glyphs glyph };
let os2_version_0 : _ = {
    s_typo_ascender <- s16be,
    s_typo_descender <- s16be,
    s_typo_line_gap <- s16be,
    us_win_ascent <- u16be,
    usWinDescent <- u16be,
};
let os2_version_1 : _ = {
    version_0 <- os2_version_0,
    ul_code_page_range1 <- u32be,
    ul_code_page_range2 <- u32be,
};
let os2_version_2_3_4 : _ = {
    version_1 <- os2_version_1,
    sx_height <- s16be,
    s_cap_height <- s16be,
    us_default_char <- u16be,
    us_break_char <- u16be,
    us_max_context <- u16be,
};
let os2_version_5 : _ = {
    parent <- os2_version_2_3_4,
    usLowerOpticalPointSize <- u16be,
    usUpperOpticalPointSize <- u16be,
};
let os2_table : _ = fun table_length => {
    version <- u16be,
    x_avg_char_width <- s16be,
    us_weight_class <- u16be,
    us_width_class <- u16be,
    fs_type <- u16be,
    y_subscript_x_size <- s16be,
    y_subscript_y_size <- s16be,
    y_subscript_x_offset <- s16be,
    y_subscript_y_offset <- s16be,
    y_superscript_x_size <- s16be,
    y_superscript_y_size <- s16be,
    y_superscript_x_offset <- s16be,
    y_superscript_y_offset <- s16be,
    y_strikeout_size <- s16be,
    y_strikeout_position <- s16be,
    s_family_class <- s16be,
    panose <- array8 10 u8,
    ul_unicode_range1 <- u32be,
    ul_unicode_range2 <- u32be,
    ul_unicode_range3 <- u32be,
    ul_unicode_range4 <- u32be,
    ach_vend_id <- tag,
    fs_selection <- u16be,
    us_first_char_index <- u16be,
    us_last_char_index <- u16be,
    data <- match version {
        0 => match (u32_gte table_length 78) {
            false => {},
            true => os2_version_0,
        },
        1 => os2_version_1,
        2 => os2_version_2_3_4,
        3 => os2_version_2_3_4,
        4 => os2_version_2_3_4,
        5 => os2_version_5,
        _ => os2_version_5,
    },
};
let post_table : _ = {
    version <- version16dot16,
    italic_angle <- fixed,
    underline_position <- fword,
    underline_thickness <- fword,
    is_fixed_pitch <- u32be,
    min_mem_type42 <- u32be,
    max_mem_type42 <- u32be,
    min_mem_type1 <- u32be,
    max_mem_type1 <- u32be,
    names <- match version {
        0x10000 => {},
        0x20000 => {
            num_glyphs <- u16be,
            glyph_name_index <- array16 num_glyphs u16be,
            string_data <- stream_pos,
        },
        0x25000 => { num_glyphs <- u16be, offset <- array16 num_glyphs s8 },
        0x30000 => {},
        _ => {},
    },
};
let base_table : _ = unknown_table;
let attach_list : _ = let attach_point_table : _ = {
    point_count <- u16be,
    point_indices <- array16 point_count u16be,
};
{
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    glyph_count <- u16be,
    attach_point_offsets <- array16 glyph_count (offset16 table_start attach_point_table),
};
let caret_value : _ = let caret_value_format_1 : _ = { coordinate <- s16be };
let caret_value_format_2 : _ = { caret_value_point_index <- u16be };
let caret_value_format_3 : _ = fun table_start => {
    coordinate <- s16be,
    table <- offset16 table_start device_or_variation_index_table,
};
{
    table_start <- stream_pos,
    caret_value_format <- u16be,
    data <- match caret_value_format {
        1 => caret_value_format_1,
        2 => caret_value_format_2,
        3 => caret_value_format_3 table_start,
        _ => unknown_table,
    },
};
let lig_glyph : _ = {
    table_start <- stream_pos,
    caret_count <- u16be,
    caret_values <- array16 caret_count (offset16 table_start caret_value),
};
let lig_caret_list : _ = {
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    lig_glyph_count <- u16be,
    lig_glyph_offsets <- array16 lig_glyph_count (offset16 table_start lig_glyph),
};
let mark_glyph_sets : _ = {
    table_start <- stream_pos,
    format <- u16be,
    mark_glyph_set_count <- u16be,
    coverage <- array16 mark_glyph_set_count (offset32 table_start coverage_table),
};
let gdef_table : _ = let gdef_header_version_1_2 : _ = fun gdef_start => {
    mark_glyph_sets_def <- offset16 gdef_start mark_glyph_sets,
};
let gdef_header_version_1_3 : _ = fun gdef_start => { item_var_store <- u32be };
{
    table_start <- stream_pos,
    major_version <- u16be when u16_eq major_version 1,
    minor_version <- u16be,
    glyph_class_def <- offset16 table_start class_def,
    attach_list <- offset16 table_start attach_list,
    lig_caret_list <- offset16 table_start lig_caret_list,
    mark_attach_class_def <- offset16 table_start class_def,
    data <- match minor_version {
        0 => {},
        1 => {},
        2 => gdef_header_version_1_2 table_start,
        3 => gdef_header_version_1_3 table_start,
        _ => gdef_header_version_1_3 table_start,
    },
};
let gpos_table : _ = unknown_table;
let gsub_table : _ = unknown_table;
let jstf_table : _ = unknown_table;
let math_table : _ = unknown_table;
let table_record : _ = {
    table_id <- tag,
    checksum <- u32be,
    offset <- u32be,
    length <- u32be,
};
let find_table : _ =
fun num_tables => fun table_records => fun table_id => array16_find (_ num_tables table_records table_id) (Repr table_record) (fun table_record => u32_eq table_record.table_id table_id) table_records;
let link_table : _ =
fun file_start => fun table_record => fun table_format => link (pos_add_u32 file_start table_record.offset) (limit32 table_record.length table_format);
let table_directory : _ = fun file_start => {
    sfnt_version <- u32be when bool_or (u32_eq sfnt_version 0x10000) (u32_eq sfnt_version "OTTO"),
    num_tables <- u16be,
    search_range <- u16be,
    entry_selector <- u16be,
    range_shift <- u16be,
    table_records <- array16 num_tables table_record,
    table_links <- let required_table :
    _ file_start sfnt_version num_tables search_range entry_selector range_shift table_records =
    fun table_id => fun table_format => {
        table_record <- unwrap (Repr table_record) (find_table (_ file_start sfnt_version num_tables search_range entry_selector range_shift table_records table_id table_format) table_records table_id),
        link <- link_table file_start table_record table_format,
    };
    let required_table_with_len :
    _ file_start sfnt_version num_tables search_range entry_selector range_shift table_records =
    fun table_id => fun table_format => {
        table_record <- unwrap (Repr table_record) (find_table (_ file_start sfnt_version num_tables search_range entry_selector range_shift table_records table_id table_format) table_records table_id),
        link <- link_table file_start table_record (table_format table_record.length),
    };
    let optional_table :
    _ file_start sfnt_version num_tables search_range entry_selector range_shift table_records =
    fun table_id => fun table_format => option_fold (Repr table_record) Format {} (fun record => link_table file_start record table_format) (find_table (_ file_start sfnt_version num_tables search_range entry_selector range_shift table_records table_id table_format) table_records table_id);
    {
        cmap <- required_table "cmap" cmap_table,
        head <- required_table "head" head_table,
        hhea <- required_table "hhea" hhea_table,
        maxp <- required_table "maxp" maxp_table,
        htmx <- required_table "hmtx" {
            hhea <- deref (_ file_start sfnt_version num_tables search_range entry_selector range_shift table_records cmap head hhea maxp) hhea.link,
            maxp <- deref (_ file_start sfnt_version num_tables search_range entry_selector range_shift table_records cmap head hhea maxp hhea) maxp.link,
            table <- htmx_table hhea.number_of_long_horizontal_metrics maxp.num_glyphs,
        },
        name <- required_table "name" name_table,
        os2 <- required_table_with_len "OS/2" os2_table,
        post <- required_table "post" post_table,
        cvt <- optional_table "cvt " unknown_table,
        fpgm <- optional_table "fpgm" unknown_table,
        glyf <- optional_table "glyf" {
            maxp <- deref (_ file_start sfnt_version num_tables search_range entry_selector range_shift table_records cmap head hhea maxp htmx name os2 post cvt fpgm) maxp.link,
            table <- glyf_table 1,
        },
        loca <- optional_table "loca" {
            maxp <- deref (_ file_start sfnt_version num_tables search_range entry_selector range_shift table_records cmap head hhea maxp htmx name os2 post cvt fpgm glyf) maxp.link,
            head <- deref (_ file_start sfnt_version num_tables search_range entry_selector range_shift table_records cmap head hhea maxp htmx name os2 post cvt fpgm glyf maxp) head.link,
            table <- loca_table maxp.num_glyphs head.index_to_loc_format,
        },
        prep <- optional_table "prep" unknown_table,
        gasp <- optional_table "gasp" unknown_table,
        cff <- optional_table "CFF " unknown_table,
        cff2 <- optional_table "CFF2" unknown_table,
        vorg <- optional_table "VORG" unknown_table,
        svg <- optional_table "SVG " unknown_table,
        ebdt <- optional_table "EBDT" unknown_table,
        eblc <- optional_table "EBLC" unknown_table,
        ebsc <- optional_table "EBSC" unknown_table,
        cbdt <- optional_table "CBDT" unknown_table,
        cblc <- optional_table "CBLC" unknown_table,
        sbix <- optional_table "sbix" unknown_table,
        base <- optional_table "BASE" base_table,
        gdef <- optional_table "GDEF" gdef_table,
        gpos <- optional_table "GPOS" gpos_table,
        gsub <- optional_table "GSUB" gsub_table,
        jstf <- optional_table "JSTF" jstf_table,
        math <- optional_table "MATH" math_table,
        avar <- optional_table "avar" unknown_table,
        cvar <- optional_table "cvar" unknown_table,
        fvar <- optional_table "fvar" unknown_table,
        gvar <- optional_table "gvar" unknown_table,
        hvar <- optional_table "HVAR" unknown_table,
        mvar <- optional_table "MVAR" unknown_table,
        stat <- optional_table "STAT" unknown_table,
        vvar <- optional_table "VVAR" unknown_table,
        colr <- optional_table "COLR" unknown_table,
        cpal <- optional_table "CPAL" unknown_table,
        dsig <- optional_table "DSIG" unknown_table,
        hdmx <- optional_table "hdmx" unknown_table,
        kern <- optional_table "kern" unknown_table,
        ltsh <- optional_table "LTSH" unknown_table,
        merg <- optional_table "MERG" unknown_table,
        meta <- optional_table "meta" unknown_table,
        pclt <- optional_table "PCLT" unknown_table,
        vdmx <- optional_table "VDMX" unknown_table,
        vhea <- optional_table "vhea" unknown_table,
        vmtx <- optional_table "vmtx" unknown_table,
    },
};
let main : _ = { start <- stream_pos, directory <- table_directory start };
main : Format
'''
stderr = ''
