use codespan::{ByteIndex, FileId, Span};
use codespan_reporting::diagnostic::Diagnostic;
use std::sync::Arc;

use crate::core::{Alias, Constant, Item, Module, Universe, StructType, Term, TypeField};
use crate::lexer::Token;
use crate::literal;

grammar(file_id: FileId, report: &mut dyn FnMut(Diagnostic));

extern {
    type Location = ByteIndex;
    type Error = Diagnostic;

    enum Token {
        "doc comment" => Token::DocComment(<String>),
        "inner doc comment" => Token::InnerDocComment(<String>),
        "identifier" => Token::Identifier(<String>),
        "numeric literal" => Token::NumberLiteral(<literal::Number>),
        "string literal" => Token::StringLiteral(<literal::String>),
        "character literal" => Token::CharLiteral(<literal::Char>),

        "bool_elim" => Token::BoolElim,
        "else" => Token::Else,
        "f32" => Token::F32,
        "f64" => Token::F64,
        "Format" => Token::Format,
        "global" => Token::Global,
        "Host" => Token::Host,
        "if" => Token::If,
        "int" => Token::Int,
        "int_elim" => Token::IntElim,
        "item" => Token::Item,
        "Kind" => Token::Kind,
        "match" => Token::Match,
        "struct" => Token::Struct,

        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,

        "!" => Token::Bang,
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equals,
        "=>" => Token::EqualsGreater,
        ";" => Token::Semi,
    }
}

pub Module: Module = {
    <doc: "inner doc comment"*>
    <items: Item*> => {
        let doc = Arc::from(doc);

        Module { file_id, doc, items }
    },
};

Item: Item = {
    <doc: "doc comment"*>
    <start: @L> <name: "identifier"> "=" <term: Term> ";" <end: @R> => {
        let span = Span::new(start, end);
        let doc = Arc::from(doc);
        let term = Arc::new(term);

        Item::Alias(Alias { span, doc, name, term })
    },
    <docs: "doc comment"*>
    <start: @L> "struct" <name: "identifier">  "{"
        <mut fields: (<Field> ",")*>
        <last: Field?>
    "}" <end: @R> => {
        let span = Span::new(start, end);
        let doc = Arc::from(docs);
        fields.extend(last);

        Item::Struct(StructType { span, doc, name, fields })
    },
};

Field: TypeField = {
    <doc: "doc comment"*>
    <start: @L> <name: "identifier"> ":" <term: Term> => {
        let doc = Arc::from(doc);
        let term = Arc::new(term);

        TypeField { doc, start, name, term }
    },
};

Term: Term = {
    TermAtomic,
    <term: TermAtomic> ":" <ty: Term> => Term::Ann(Arc::new(term), Arc::new(ty)),
};

TermAtomic: Term = {
    "(" <term: Term> ")" => term,
    <start: @L> "!" <end: @R> => Term::Error(Span::new(start, end)),
    <start: @L> "global" <name: "identifier"> <end: @R> => Term::Global(Span::new(start, end), name),
    <start: @L> "item" <name: "identifier"> <end: @R> => Term::Item(Span::new(start, end), name),
    <start: @L> "Host" <end: @R> => Term::Universe(Span::new(start, end), Universe::Host),
    <start: @L> "Format" <end: @R> => Term::Universe(Span::new(start, end), Universe::Format),
    <start: @L> "Kind" <end: @R> => Term::Universe(Span::new(start, end), Universe::Kind),
    <start: @L> "bool_elim" <head: Term> "{" <if_true: Term> "," <if_false: Term> "}" <end: @R> => {
        Term::BoolElim(Span::new(start, end), Arc::new(head), Arc::new(if_true), Arc::new(if_false))
    },
    <start: @L> "int_elim" <head: Term> "{" <branches: (<"numeric literal"> "=>" <Term> ",")*> <default: Term> "}" <end: @R> => {
        let branches = branches
            .into_iter()
            .filter_map(|(literal, term)| {
                Some((literal.parse_big_int(file_id, report)?, Arc::new(term)))
            }).collect();

        Term::IntElim(Span::new(start, end), Arc::new(head), branches, Arc::new(default))
    },
    <start: @L> "int" <literal: "numeric literal"> <end: @R> => {
        let span = Span::new(start, end);
        match literal.parse_big_int(file_id, report) {
            Some(value) => Term::Constant(span, Constant::Int(value)),
            None => Term::Error(span),
        }
    },
    <start: @L> "f32" <literal: "numeric literal"> <end: @R> => {
        let span = Span::new(start, end);
        match literal.parse_float(file_id, report) {
            Some(value) => Term::Constant(span, Constant::F32(value)),
            None => Term::Error(span),
        }
    },
    <start: @L> "f64" <literal: "numeric literal"> <end: @R> => {
        let span = Span::new(start, end);
        match literal.parse_float(file_id, report) {
            Some(value) => Term::Constant(span, Constant::F64(value)),
            None => Term::Error(span),
        }
    },
};
