use codespan::{ByteIndex, FileId, Span};
use codespan_reporting::diagnostic::Diagnostic;
use std::sync::Arc;

use crate::concrete::{Item, Module, SpannedString, StructType, Term, TypeField};
use crate::lexer::Token;

grammar(file_id: FileId, report: &mut dyn FnMut(Diagnostic));

extern {
    type Location = ByteIndex;
    type Error = Diagnostic;

    enum Token {
        "identifier" => Token::Identifier(<String>),
        "doc comment" => Token::DocComment(<String>),

        "struct" => Token::Struct,

        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,

        "!" => Token::Bang,
        ":" => Token::Colon,
        "," => Token::Comma,
    }
}

pub Module: Module = {
    <items: Item*> => Module { file_id, items },
};

Item: Item = {
    <docs: "doc comment"*>
    <start: @L> "struct" <name: Identifier> "{"
        <fields: (<Field> ",")*>
        <last: Field?>
    "}" <end: @R> => {
        let span = Span::from(start..end);
        let doc = Arc::from(docs);
        let mut fields = fields;
        fields.extend(last);

        Item::Struct(StructType { span, doc, name, fields })
    },
};

Field: TypeField= {
    <docs: "doc comment"*>
    <name: Identifier> ":" <term: Term> => {
        TypeField { doc: Arc::from(docs), name, term }
    },
};

Term: Term = {
    <name: Identifier> => Term::Var(name),
};

Identifier: SpannedString = {
    <start: @L> <name: "identifier"> => {
        SpannedString::new(start, name)
    },
};
