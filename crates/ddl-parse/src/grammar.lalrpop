use codespan::{ByteIndex, Span};
use codespan_reporting::Diagnostic;
use ddl_concrete::{Module, Item};

use crate::lexer::Token;

grammar(diagnostics: &mut Vec<Diagnostic>);

extern {
    type Location = ByteIndex;
    type Error = Diagnostic;

    enum Token {
        "identifier" => Token::Identifier(<String>),
        "struct" => Token::Struct,
        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,
    }
}

pub Module: Module = {
    <items: Item*> => Module { items },
};

Item: Item = {
    <start: @L> "struct" <name: "identifier"> "{" "}" <end: @R> => {
        Item::Struct(Span::from(start..end), name)
    },
};
